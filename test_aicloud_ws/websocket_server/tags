!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ARRAY_SIZE	mongoose.h	172;"	d
BASE64_ENCODE_BODY	mongoose.c	297;"	d	file:
BASE64_FLUSH	mongoose.c	327;"	d	file:
BASE64_FLUSH	mongoose.c	337;"	d	file:
BASE64_FLUSH	mongoose.c	346;"	d	file:
BASE64_FLUSH	mongoose.c	353;"	d	file:
BASE64_OUT	mongoose.c	322;"	d	file:
BASE64_OUT	mongoose.c	336;"	d	file:
BASE64_OUT	mongoose.c	340;"	d	file:
BASE64_OUT	mongoose.c	352;"	d	file:
BIG_ENDIAN	mongoose.c	920;"	d	file:
BIG_ENDIAN	mongoose.h	424;"	d
BYTE_ORDER	mongoose.c	915;"	d	file:
BYTE_ORDER	mongoose.h	426;"	d
CC	examples.mk	/^CC = clang$/;"	m
CC	examples.mk	/^CC = gcc$/;"	m
CFLAGS	examples.mk	/^CFLAGS = -g -W -Wall -Werror -I..\/.. -Wno-unused-function $(CFLAGS_EXTRA) $(MODULE_CFLAGS)$/;"	m
CJSON_CDECL	cJSON.h	55;"	d
CJSON_CDECL	cJSON.h	71;"	d
CJSON_EXPORT_SYMBOLS	cJSON.h	60;"	d
CJSON_NESTING_LIMIT	cJSON.h	137;"	d
CJSON_PUBLIC	cJSON.c	/^CJSON_PUBLIC(cJSON_bool) cJSON_Compare(const cJSON * const a, const cJSON * const b, const cJSON_bool case_sensitive)$/;"	f
CJSON_PUBLIC	cJSON.c	/^CJSON_PUBLIC(cJSON_bool) cJSON_HasObjectItem(const cJSON *object, const char *string)$/;"	f
CJSON_PUBLIC	cJSON.c	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsArray(const cJSON * const item)$/;"	f
CJSON_PUBLIC	cJSON.c	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsBool(const cJSON * const item)$/;"	f
CJSON_PUBLIC	cJSON.c	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsFalse(const cJSON * const item)$/;"	f
CJSON_PUBLIC	cJSON.c	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsInvalid(const cJSON * const item)$/;"	f
CJSON_PUBLIC	cJSON.c	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsNull(const cJSON * const item)$/;"	f
CJSON_PUBLIC	cJSON.c	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(const cJSON * const item)$/;"	f
CJSON_PUBLIC	cJSON.c	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsObject(const cJSON * const item)$/;"	f
CJSON_PUBLIC	cJSON.c	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsRaw(const cJSON * const item)$/;"	f
CJSON_PUBLIC	cJSON.c	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsString(const cJSON * const item)$/;"	f
CJSON_PUBLIC	cJSON.c	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsTrue(const cJSON * const item)$/;"	f
CJSON_PUBLIC	cJSON.c	/^CJSON_PUBLIC(cJSON_bool) cJSON_PrintPreallocated(cJSON *item, char *buf, const int len, const cJSON_bool fmt)$/;"	f
CJSON_PUBLIC	cJSON.c	/^CJSON_PUBLIC(cJSON_bool) cJSON_ReplaceItemViaPointer(cJSON * const parent, cJSON * const item, cJSON * replacement)$/;"	f
CJSON_PUBLIC	cJSON.h	64;"	d
CJSON_PUBLIC	cJSON.h	66;"	d
CJSON_PUBLIC	cJSON.h	68;"	d
CJSON_PUBLIC	cJSON.h	75;"	d
CJSON_PUBLIC	cJSON.h	77;"	d
CJSON_STDCALL	cJSON.h	56;"	d
CJSON_STDCALL	cJSON.h	72;"	d
CJSON_VERSION_MAJOR	cJSON.h	82;"	d
CJSON_VERSION_MINOR	cJSON.h	83;"	d
CJSON_VERSION_PATCH	cJSON.h	84;"	d
CONSOLE_UART	mongoose.c	13201;"	d	file:
CONTENT_DISPOSITION	mongoose.c	6699;"	d	file:
CS_COMMON_CS_DBG_H_	mongoose.c	423;"	d	file:
CS_COMMON_CS_DIRENT_H_	mongoose.c	688;"	d	file:
CS_COMMON_CS_ENDIAN_H_	mongoose.c	903;"	d	file:
CS_COMMON_MG_MEM_H_	mongoose.c	187;"	d	file:
CS_COMMON_PLATFORMS_LWIP_MG_NET_IF_LWIP_H_	mongoose.c	14830;"	d	file:
CS_COMMON_PLATFORMS_PIC32_NET_IF_H_	mongoose.c	15848;"	d	file:
CS_COMMON_PLATFORMS_PLATFORM_CC3100_H_	mongoose.h	613;"	d
CS_COMMON_PLATFORMS_PLATFORM_CC3200_H_	mongoose.h	658;"	d
CS_COMMON_PLATFORMS_PLATFORM_CC3220_H_	mongoose.h	779;"	d
CS_COMMON_PLATFORMS_PLATFORM_ESP32_H_	mongoose.h	515;"	d
CS_COMMON_PLATFORMS_PLATFORM_ESP8266_H_	mongoose.h	556;"	d
CS_COMMON_PLATFORMS_PLATFORM_MSP432_H_	mongoose.h	887;"	d
CS_COMMON_PLATFORMS_PLATFORM_TM4C129_H_	mongoose.h	991;"	d
CS_COMMON_PLATFORMS_PLATFORM_UNIX_H_	mongoose.h	366;"	d
CS_COMMON_PLATFORMS_PLATFORM_WINDOWS_H_	mongoose.h	180;"	d
CS_COMMON_PLATFORMS_SIMPLELINK_SL_FS_SLFS_H_	mongoose.c	13313;"	d	file:
CS_COMMON_PLATFORMS_SIMPLELINK_SL_NET_IF_H_	mongoose.c	14149;"	d	file:
CS_COMMON_PLATFORM_H_	mongoose.h	38;"	d
CS_DEFINE_DIRENT	mongoose.h	304;"	d
CS_DEFINE_DIRENT	mongoose.h	573;"	d
CS_DEFINE_DIRENT	mongoose.h	761;"	d
CS_ENABLE_DEBUG	mongoose.c	432;"	d	file:
CS_ENABLE_STDIO	mongoose.h	1028;"	d
CS_ENABLE_STDIO	mongoose.h	327;"	d
CS_ENABLE_STDIO	mongoose.h	477;"	d
CS_ENABLE_STDIO	mongoose.h	546;"	d
CS_ENABLE_STDIO	mongoose.h	597;"	d
CS_ENABLE_STDIO	mongoose.h	765;"	d
CS_ENABLE_STDIO	mongoose.h	873;"	d
CS_ENABLE_STDIO	mongoose.h	972;"	d
CS_LOG_ENABLE_TS_DIFF	mongoose.c	440;"	d	file:
CS_LOG_PREFIX_LEN	mongoose.c	436;"	d	file:
CS_MONGOOSE_SRC_COMMON_H_	mongoose.h	24;"	d
CS_MONGOOSE_SRC_INTERNAL_H_	mongoose.c	26;"	d	file:
CS_MONGOOSE_SRC_NET_IF_SOCKET_H_	mongoose.c	3422;"	d	file:
CS_MONGOOSE_SRC_NET_IF_SOCKS_H_	mongoose.c	3446;"	d	file:
CS_PLATFORM	mongoose.h	69;"	d
CS_PLATFORM	mongoose.h	71;"	d
CS_PLATFORM	mongoose.h	73;"	d
CS_PLATFORM	mongoose.h	75;"	d
CS_PLATFORM	mongoose.h	77;"	d
CS_PLATFORM	mongoose.h	79;"	d
CS_PLATFORM	mongoose.h	81;"	d
CS_PLATFORM	mongoose.h	83;"	d
CS_PLATFORM	mongoose.h	85;"	d
CS_PLATFORM	mongoose.h	87;"	d
CS_PLATFORM	mongoose.h	89;"	d
CS_PLATFORM	mongoose.h	91;"	d
CS_PLATFORM	mongoose.h	94;"	d
CS_PLATFORM	mongoose.h	96;"	d
CS_PLATFORM	mongoose.h	98;"	d
CS_P_CC3100	mongoose.h	49;"	d
CS_P_CC3200	mongoose.h	50;"	d
CS_P_CC3220	mongoose.h	51;"	d
CS_P_CUSTOM	mongoose.h	44;"	d
CS_P_ESP32	mongoose.h	47;"	d
CS_P_ESP8266	mongoose.h	48;"	d
CS_P_MBED	mongoose.h	54;"	d
CS_P_MSP432	mongoose.h	52;"	d
CS_P_NRF51	mongoose.h	58;"	d
CS_P_NRF52	mongoose.h	59;"	d
CS_P_NXP_KINETIS	mongoose.h	57;"	d
CS_P_NXP_LPC	mongoose.h	56;"	d
CS_P_PIC32	mongoose.h	60;"	d
CS_P_RS14100	mongoose.h	61;"	d
CS_P_STM32	mongoose.h	62;"	d
CS_P_TM4C129	mongoose.h	53;"	d
CS_P_UNIX	mongoose.h	45;"	d
CS_P_WINCE	mongoose.h	55;"	d
CS_P_WINDOWS	mongoose.h	46;"	d
C_DISABLE_BUILTIN_SNPRINTF	mongoose.c	1713;"	d	file:
C_SNPRINTF_APPEND_CHAR	mongoose.c	1726;"	d	file:
C_SNPRINTF_FLAG_ZERO	mongoose.c	1732;"	d	file:
DATA_FILE	mongoose.c	/^enum mg_http_proto_data_type { DATA_NONE, DATA_FILE, DATA_PUT };$/;"	e	enum:mg_http_proto_data_type	file:
DATA_NONE	mongoose.c	/^enum mg_http_proto_data_type { DATA_NONE, DATA_FILE, DATA_PUT };$/;"	e	enum:mg_http_proto_data_type	file:
DATA_PUT	mongoose.c	/^enum mg_http_proto_data_type { DATA_NONE, DATA_FILE, DATA_PUT };$/;"	e	enum:mg_http_proto_data_type	file:
DBG	mongoose.c	533;"	d	file:
DBG	mongoose.c	537;"	d	file:
DBG	mongoose.c	544;"	d	file:
DIR	mongoose.c	/^typedef struct { int dummy; } DIR;$/;"	t	typeref:struct:__anon4	file:
DIRSEP	mongoose.h	1009;"	d
DIRSEP	mongoose.h	303;"	d
DIRSEP	mongoose.h	445;"	d
DIRSEP	mongoose.h	532;"	d
DIRSEP	mongoose.h	571;"	d
DIRSEP	mongoose.h	689;"	d
DIRSEP	mongoose.h	812;"	d
DIRSEP	mongoose.h	912;"	d
DO_NOT_WARN_UNUSED	mongoose.h	162;"	d
DO_NOT_WARN_UNUSED	mongoose.h	168;"	d
EINPROGRESS	mongoose.h	242;"	d
EWOULDBLOCK	mongoose.h	245;"	d
F1	mongoose.c	972;"	d	file:
F2	mongoose.c	973;"	d	file:
F3	mongoose.c	974;"	d	file:
F4	mongoose.c	975;"	d	file:
FD_INVALID	mongoose.c	/^  FD_INVALID,$/;"	e	enum:fd_type	file:
FD_SLFS	mongoose.c	/^  FD_SLFS$/;"	e	enum:fd_type	file:
FD_SPIFFS	mongoose.c	/^  FD_SPIFFS,$/;"	e	enum:fd_type	file:
FD_SYS	mongoose.c	/^  FD_SYS,$/;"	e	enum:fd_type	file:
FLAGS_MASK_FIN	mongoose.c	9832;"	d	file:
FLAGS_MASK_OP	mongoose.c	9833;"	d	file:
FLAGS_MASK_OP	websocket_server.c	11;"	d	file:
FS_SLFS_MAX_FILE_SIZE	mongoose.c	13383;"	d	file:
HEXTOI	mongoose.c	7281;"	d	file:
HOSTtime	mongoose.c	/^time_t HOSTtime() {$/;"	f
INT64_FMT	mongoose.h	1011;"	d
INT64_FMT	mongoose.h	293;"	d
INT64_FMT	mongoose.h	447;"	d
INT64_FMT	mongoose.h	534;"	d
INT64_FMT	mongoose.h	577;"	d
INT64_FMT	mongoose.h	641;"	d
INT64_FMT	mongoose.h	691;"	d
INT64_FMT	mongoose.h	814;"	d
INT64_FMT	mongoose.h	914;"	d
INT64_X_FMT	mongoose.h	1012;"	d
INT64_X_FMT	mongoose.h	294;"	d
INT64_X_FMT	mongoose.h	448;"	d
INT64_X_FMT	mongoose.h	535;"	d
INT64_X_FMT	mongoose.h	578;"	d
INT64_X_FMT	mongoose.h	642;"	d
INT64_X_FMT	mongoose.h	692;"	d
INT64_X_FMT	mongoose.h	815;"	d
INT64_X_FMT	mongoose.h	915;"	d
INVALID_SOCKET	mongoose.h	442;"	d
INVALID_SOCKET	mongoose.h	638;"	d
INVALID_SOCKET	mongoose.h	686;"	d
INVALID_SOCKET	mongoose.h	809;"	d
INVALID_SOCKET	mongoose.h	909;"	d
IPADDR_NTOA	mongoose.c	14919;"	d	file:
IPADDR_NTOA	mongoose.c	14927;"	d	file:
LITTLE_ENDIAN	mongoose.c	917;"	d	file:
LITTLE_ENDIAN	mongoose.h	423;"	d
LL_DEBUG	mongoose.c	/^  LL_DEBUG = 3,$/;"	e	enum:cs_log_level	file:
LL_ERROR	mongoose.c	/^  LL_ERROR = 0,$/;"	e	enum:cs_log_level	file:
LL_INFO	mongoose.c	/^  LL_INFO = 2,$/;"	e	enum:cs_log_level	file:
LL_NONE	mongoose.c	/^  LL_NONE = -1,$/;"	e	enum:cs_log_level	file:
LL_VERBOSE_DEBUG	mongoose.c	/^  LL_VERBOSE_DEBUG = 4,$/;"	e	enum:cs_log_level	file:
LL_WARN	mongoose.c	/^  LL_WARN = 1,$/;"	e	enum:cs_log_level	file:
LOG	mongoose.c	515;"	d	file:
LOG	mongoose.c	524;"	d	file:
LOG	mongoose.c	543;"	d	file:
LWIP_TIMEVAL_PRIVATE	mongoose.h	585;"	d
MAX	mongoose.c	10348;"	d	file:
MAX_OPEN_SLFS_FILES	mongoose.c	13323;"	d	file:
MBUF_FREE	mongoose.c	1414;"	d	file:
MBUF_FREE	mongoose.c	35;"	d	file:
MBUF_REALLOC	mongoose.c	1410;"	d	file:
MBUF_REALLOC	mongoose.c	31;"	d	file:
MD5STEP	mongoose.c	977;"	d	file:
MG_CALLOC	mongoose.c	198;"	d	file:
MG_COPY_COMMON_CONNECTION_OPTIONS	mongoose.c	2240;"	d	file:
MG_CTL_MSG_MESSAGE_SIZE	mongoose.c	57;"	d	file:
MG_DEFAULT_NAMESERVER	mongoose.c	11866;"	d	file:
MG_DISABLE_PFS	mongoose.c	49;"	d	file:
MG_ENABLE_BROADCAST	mongoose.h	331;"	d
MG_ENABLE_BROADCAST	mongoose.h	481;"	d
MG_ENABLE_DIRECTORY_LISTING	mongoose.h	335;"	d
MG_ENABLE_DIRECTORY_LISTING	mongoose.h	485;"	d
MG_ENABLE_DIRECTORY_LISTING	mongoose.h	680;"	d
MG_ENABLE_DIRECTORY_LISTING	mongoose.h	803;"	d
MG_ENABLE_FILESYSTEM	mongoose.h	339;"	d
MG_ENABLE_FILESYSTEM	mongoose.h	489;"	d
MG_ENABLE_FILESYSTEM	mongoose.h	760;"	d
MG_ENABLE_FILESYSTEM	mongoose.h	977;"	d
MG_ENABLE_HTTP_CGI	mongoose.h	343;"	d
MG_ENABLE_HTTP_CGI	mongoose.h	493;"	d
MG_ENABLE_NET_IF_LWIP_LOW_LEVEL	mongoose.c	14833;"	d	file:
MG_ENABLE_NET_IF_PIC32	mongoose.c	15857;"	d	file:
MG_ENABLE_NET_IF_SIMPLELINK	mongoose.c	14158;"	d	file:
MG_ENABLE_NET_IF_SOCKET	mongoose.c	3431;"	d	file:
MG_ENV_EXPORT_TO_CGI	mongoose.c	8853;"	d	file:
MG_FREE	mongoose.c	206;"	d	file:
MG_FS_SLFS	mongoose.h	755;"	d
MG_F_HTTP_CGI_PARSE_HEADERS	mongoose.c	8856;"	d	file:
MG_F_MQTT_PING_PENDING	mongoose.c	10692;"	d	file:
MG_HOSTS_FILE_NAME	mongoose.h	501;"	d
MG_INTERNAL	mongoose.c	44;"	d	file:
MG_LWIP	mongoose.h	1022;"	d
MG_LWIP	mongoose.h	539;"	d
MG_LWIP	mongoose.h	582;"	d
MG_LWIP_IFACE_VTABLE	mongoose.c	15582;"	d	file:
MG_MALLOC	mongoose.c	194;"	d	file:
MG_MAX_CGI_ENVIR_VARS	mongoose.c	8849;"	d	file:
MG_MAX_HOST_LEN	mongoose.c	2231;"	d	file:
MG_MAX_HTTP_HEADERS	mongoose.h	323;"	d
MG_MAX_HTTP_HEADERS	mongoose.h	473;"	d
MG_MAX_HTTP_REQUEST_SIZE	mongoose.h	315;"	d
MG_MAX_HTTP_REQUEST_SIZE	mongoose.h	465;"	d
MG_MAX_HTTP_SEND_MBUF	mongoose.h	319;"	d
MG_MAX_HTTP_SEND_MBUF	mongoose.h	469;"	d
MG_MQTT_ERROR_INCOMPLETE_MSG	mongoose.c	89;"	d	file:
MG_MQTT_ERROR_MALFORMED_MSG	mongoose.c	90;"	d	file:
MG_NET_IF	mongoose.h	1018;"	d
MG_NET_IF	mongoose.h	1020;"	d
MG_NET_IF	mongoose.h	347;"	d
MG_NET_IF	mongoose.h	497;"	d
MG_NET_IF	mongoose.h	542;"	d
MG_NET_IF	mongoose.h	590;"	d
MG_NET_IF	mongoose.h	592;"	d
MG_NET_IF	mongoose.h	624;"	d
MG_NET_IF	mongoose.h	675;"	d
MG_NET_IF	mongoose.h	796;"	d
MG_NET_IF	mongoose.h	903;"	d
MG_NET_IF_LWIP_LOW_LEVEL	mongoose.h	109;"	d
MG_NET_IF_NULL	mongoose.h	111;"	d
MG_NET_IF_PIC32	mongoose.h	110;"	d
MG_NET_IF_SIMPLELINK	mongoose.h	108;"	d
MG_NET_IF_SOCKET	mongoose.h	107;"	d
MG_NULL_IFACE_VTABLE	mongoose.c	3630;"	d	file:
MG_PIC32_IFACE_VTABLE	mongoose.c	16131;"	d	file:
MG_Q_MSG_CB	mongoose.c	/^  MG_Q_MSG_CB,$/;"	e	enum:mg_q_msg_type	file:
MG_REALLOC	mongoose.c	202;"	d	file:
MG_RESOLV_CONF_FILE_NAME	mongoose.h	505;"	d
MG_SET_PTRPTR	mongoose.c	38;"	d	file:
MG_SIG_ACCEPT	mongoose.c	/^  MG_SIG_ACCEPT = 5,$/;"	e	enum:mg_sig_type	file:
MG_SIG_CLOSE_CONN	mongoose.c	/^  MG_SIG_CLOSE_CONN = 3,$/;"	e	enum:mg_sig_type	file:
MG_SIG_CONNECT_RESULT	mongoose.c	/^  MG_SIG_CONNECT_RESULT = 1,$/;"	e	enum:mg_sig_type	file:
MG_SIG_QUEUE_LEN	mongoose.c	15617;"	d	file:
MG_SIG_RECV	mongoose.c	/^  MG_SIG_RECV = 2,$/;"	e	enum:mg_sig_type	file:
MG_SIG_TOMBSTONE	mongoose.c	/^  MG_SIG_TOMBSTONE = 4,$/;"	e	enum:mg_sig_type	file:
MG_SL_IFACE_VTABLE	mongoose.c	14559;"	d	file:
MG_SOCKET_IFACE_VTABLE	mongoose.c	4197;"	d	file:
MG_SSL_IF	mongoose.h	625;"	d
MG_SSL_IF	mongoose.h	676;"	d
MG_SSL_IF	mongoose.h	798;"	d
MG_SSL_IF	mongoose.h	904;"	d
MG_SSL_IF_MBEDTLS	mongoose.h	114;"	d
MG_SSL_IF_OPENSSL	mongoose.h	113;"	d
MG_SSL_IF_SIMPLELINK	mongoose.h	115;"	d
MG_SSL_IF_SIMPLELINK_SLFS_PREFIX	mongoose.c	14596;"	d	file:
MG_SSL_IF_SIMPLELINK_SLFS_PREFIX_LEN	mongoose.c	14599;"	d	file:
MG_TCP_IO_SIZE	mongoose.c	2234;"	d	file:
MG_TCP_RECV_BUFFER_SIZE	mongoose.c	14179;"	d	file:
MG_UART_CHAR_PUT	mongoose.c	13696;"	d	file:
MG_UART_WRITE	mongoose.c	13698;"	d	file:
MG_UDP_IO_SIZE	mongoose.c	2237;"	d	file:
MG_UDP_RECV_BUFFER_SIZE	mongoose.c	14180;"	d	file:
MG_VERSION	mongoose.h	26;"	d
MG_WEBSOCKET_PING_INTERVAL_SECONDS	mongoose.c	9829;"	d	file:
MIME_ENTRY	mongoose.c	5926;"	d	file:
MIN	mongoose.c	100;"	d	file:
MODULE_CFLAGS	Makefile	/^MODULE_CFLAGS = -DMG_ENABLE_FILESYSTEM=1$/;"	m
MPS_BEGIN	mongoose.c	/^  MPS_BEGIN,$/;"	e	enum:mg_http_multipart_stream_state	file:
MPS_FINALIZE	mongoose.c	/^  MPS_FINALIZE,$/;"	e	enum:mg_http_multipart_stream_state	file:
MPS_FINISHED	mongoose.c	/^  MPS_FINISHED$/;"	e	enum:mg_http_multipart_stream_state	file:
MPS_GOT_BOUNDARY	mongoose.c	/^  MPS_GOT_BOUNDARY,$/;"	e	enum:mg_http_multipart_stream_state	file:
MPS_WAITING_FOR_BOUNDARY	mongoose.c	/^  MPS_WAITING_FOR_BOUNDARY,$/;"	e	enum:mg_http_multipart_stream_state	file:
MPS_WAITING_FOR_CHUNK	mongoose.c	/^  MPS_WAITING_FOR_CHUNK,$/;"	e	enum:mg_http_multipart_stream_state	file:
NOINLINE	mongoose.h	159;"	d
NOINLINE	mongoose.h	165;"	d
NOINSTR	mongoose.h	161;"	d
NOINSTR	mongoose.h	167;"	d
NORETURN	mongoose.h	158;"	d
NORETURN	mongoose.h	164;"	d
NO_LIBC	mongoose.c	48;"	d	file:
NUM_DIGITS	mongoose.c	230;"	d	file:
NUM_LETTERS	mongoose.c	229;"	d	file:
NUM_SYS_FDS	mongoose.c	13685;"	d	file:
NUM_UPPERCASES	mongoose.c	228;"	d	file:
PDP_ENDIAN	mongoose.h	425;"	d
PRINTF_LIKE	mongoose.h	141;"	d
PRINTF_LIKE	mongoose.h	143;"	d
PROG	Makefile	/^PROG = websocket_server$/;"	m
R0	mongoose.c	1178;"	d	file:
R0	mongoose.c	1188;"	d	file:
R1	mongoose.c	1179;"	d	file:
R1	mongoose.c	1191;"	d	file:
R2	mongoose.c	1180;"	d	file:
R2	mongoose.c	1194;"	d	file:
R3	mongoose.c	1181;"	d	file:
R3	mongoose.c	1197;"	d	file:
R4	mongoose.c	1182;"	d	file:
R4	mongoose.c	1200;"	d	file:
SET_ADDR	mongoose.c	14920;"	d	file:
SET_ADDR	mongoose.c	14928;"	d	file:
SHA1HANDSOFF	mongoose.c	1155;"	d	file:
SIZE_T_FMT	mongoose.h	1007;"	d
SIZE_T_FMT	mongoose.h	295;"	d
SIZE_T_FMT	mongoose.h	443;"	d
SIZE_T_FMT	mongoose.h	530;"	d
SIZE_T_FMT	mongoose.h	569;"	d
SIZE_T_FMT	mongoose.h	643;"	d
SIZE_T_FMT	mongoose.h	687;"	d
SIZE_T_FMT	mongoose.h	810;"	d
SIZE_T_FMT	mongoose.h	910;"	d
SLFS_FD_BASE	mongoose.c	13687;"	d	file:
SNTP_ATTEMPTS	mongoose.c	12748;"	d	file:
SNTP_TIMEOUT	mongoose.c	12744;"	d	file:
SNTP_TIME_OFFSET	mongoose.c	12741;"	d	file:
SOMAXCONN	mongoose.h	645;"	d
SOURCES	examples.mk	/^SOURCES = $(PROG).c mongoose.c cJSON.c$/;"	m
SPIFFS_FD_BASE	mongoose.c	13686;"	d	file:
STR	mongoose.h	249;"	d
STRX	mongoose.h	248;"	d
S_IFCHR	mongoose.h	742;"	d
S_IFCHR	mongoose.h	865;"	d
S_IFCHR	mongoose.h	961;"	d
S_IFDIR	mongoose.h	741;"	d
S_IFDIR	mongoose.h	864;"	d
S_IFDIR	mongoose.h	960;"	d
S_IFREG	mongoose.h	743;"	d
S_IFREG	mongoose.h	866;"	d
S_IFREG	mongoose.h	962;"	d
S_ISDIR	mongoose.h	298;"	d
S_ISDIR	mongoose.h	744;"	d
S_ISDIR	mongoose.h	867;"	d
S_ISDIR	mongoose.h	963;"	d
S_ISREG	mongoose.h	301;"	d
S_ISREG	mongoose.h	745;"	d
S_ISREG	mongoose.h	868;"	d
S_ISREG	mongoose.h	964;"	d
TCP_BIND	mongoose.c	14917;"	d	file:
TCP_BIND	mongoose.c	14925;"	d	file:
TCP_NEW	mongoose.c	14916;"	d	file:
TCP_NEW	mongoose.c	14924;"	d	file:
UDP_BIND	mongoose.c	14918;"	d	file:
UDP_BIND	mongoose.c	14926;"	d	file:
UINT16_MAX	mongoose.h	285;"	d
UINT32_MAX	mongoose.h	288;"	d
WARN_UNUSED_RESULT	mongoose.h	160;"	d
WARN_UNUSED_RESULT	mongoose.h	166;"	d
WEAK	mongoose.c	/^FILE *cs_log_file WEAK = NULL;$/;"	v
WEAK	mongoose.c	/^double cs_log_ts WEAK;$/;"	v
WEAK	mongoose.c	/^enum cs_log_level cs_log_cur_msg_level WEAK = LL_NONE;$/;"	v	typeref:enum:cs_log_cur_msg_level
WEAK	mongoose.c	/^enum cs_log_level cs_log_level WEAK =$/;"	v	typeref:enum:cs_log_level
WEAK	mongoose.h	151;"	d
WEAK	mongoose.h	153;"	d
_CRT_SECURE_NO_DEPRECATE	cJSON.c	28;"	d	file:
_CRT_SECURE_NO_WARNINGS	mongoose.h	205;"	d
_FILE_OFFSET_BITS	mongoose.h	390;"	d
_FILE_OFFSET_BITS	mongoose.h	537;"	d
_FILE_OFFSET_BITS	mongoose.h	580;"	d
_LARGEFILE_SOURCE	mongoose.h	385;"	d
_LL_MAX	mongoose.c	/^  _LL_MAX = 5,$/;"	e	enum:cs_log_level	file:
_LL_MIN	mongoose.c	/^  _LL_MIN = -2,$/;"	e	enum:cs_log_level	file:
_MG_ALLOWED_CONNECT_FLAGS_MASK	mongoose.c	2244;"	d	file:
_MG_CALLBACK_MODIFIABLE_FLAGS_MASK	mongoose.c	2248;"	d	file:
_MG_F_FD_CAN_READ	mongoose.c	14345;"	d	file:
_MG_F_FD_CAN_READ	mongoose.c	3856;"	d	file:
_MG_F_FD_CAN_WRITE	mongoose.c	14346;"	d	file:
_MG_F_FD_CAN_WRITE	mongoose.c	3857;"	d	file:
_MG_F_FD_ERROR	mongoose.c	14347;"	d	file:
_MG_F_FD_ERROR	mongoose.c	3858;"	d	file:
_WINSOCK_DEPRECATED_NO_WARNINGS	mongoose.h	201;"	d
_XOPEN_SOURCE	mongoose.h	370;"	d
__STDC_FORMAT_MACROS	mongoose.h	375;"	d
__STDC_LIMIT_MACROS	mongoose.h	380;"	d
__S_IFCHR	mongoose.h	736;"	d
__S_IFCHR	mongoose.h	859;"	d
__S_IFCHR	mongoose.h	955;"	d
__S_IFDIR	mongoose.h	735;"	d
__S_IFDIR	mongoose.h	858;"	d
__S_IFDIR	mongoose.h	954;"	d
__S_IFMT	mongoose.h	733;"	d
__S_IFMT	mongoose.h	856;"	d
__S_IFMT	mongoose.h	952;"	d
__S_IFREG	mongoose.h	737;"	d
__S_IFREG	mongoose.h	860;"	d
__S_IFREG	mongoose.h	956;"	d
__S_ISTYPE	mongoose.h	739;"	d
__S_ISTYPE	mongoose.h	862;"	d
__S_ISTYPE	mongoose.h	958;"	d
__WINDOWS__	cJSON.h	32;"	d
__cdecl	mongoose.h	1013;"	d
__cdecl	mongoose.h	451;"	d
__cdecl	mongoose.h	536;"	d
__cdecl	mongoose.h	579;"	d
__cdecl	mongoose.h	693;"	d
__cdecl	mongoose.h	816;"	d
__cdecl	mongoose.h	916;"	d
__func__	mongoose.h	250;"	d
_exit	mongoose.c	/^void _exit(int status) {$/;"	f
_fstat	mongoose.c	/^int _fstat(int fd, struct stat *s) {$/;"	f
_getpid	mongoose.c	/^int _getpid() {$/;"	f
_isatty	mongoose.c	/^int _isatty(int fd) {$/;"	f
_kill	mongoose.c	/^int _kill(int pid, int sig) {$/;"	f
_not_implemented	mongoose.c	/^void _not_implemented(const char *what) {$/;"	f
_off_t	mongoose.h	/^typedef size_t _off_t;$/;"	t
_stat	mongoose.c	/^int _stat(const char *pathname, struct stat *st) {$/;"	f
_wstati64	mongoose.c	/^int _wstati64(const wchar_t *path, cs_stat_t *st) {$/;"	f
add_item_to_array	cJSON.c	/^static cJSON_bool add_item_to_array(cJSON *array, cJSON *item)$/;"	f	file:
add_item_to_object	cJSON.c	/^static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)$/;"	f	file:
allocate	cJSON.c	/^    void *(CJSON_CDECL *allocate)(size_t size);$/;"	m	struct:internal_hooks	file:
altbuf	mongoose.c	/^struct altbuf {$/;"	s	file:
altbuf_append	mongoose.c	/^MG_INTERNAL void altbuf_append(struct altbuf *ab, char c) {$/;"	f
altbuf_get_buf	mongoose.c	/^MG_INTERNAL char *altbuf_get_buf(struct altbuf *ab, int trim) {$/;"	f
altbuf_init	mongoose.c	/^MG_INTERNAL void altbuf_init(struct altbuf *ab, char *buf, size_t buf_size) {$/;"	f
altbuf_reallocated	mongoose.c	/^MG_INTERNAL int altbuf_reallocated(struct altbuf *ab) {$/;"	f
altbuf_reset	mongoose.c	/^MG_INTERNAL void altbuf_reset(struct altbuf *ab) {$/;"	f
arg	mongoose.c	/^  void *arg;$/;"	m	struct:mg_lwip_netif_tcpip_call_ctx	file:
arg	mongoose.c	/^  void *arg;$/;"	m	struct:mg_q_msg	file:
array	cJSON.h	/^CJSON_PUBLIC(int) cJSON_GetArraySize(const cJSON *array);$/;"	v
asprintf	mongoose.c	/^int asprintf(char **strp, const char *fmt, ...) {$/;"	f
auth_domain	mongoose.c	/^  char *auth_domain;         \/* owned *\/$/;"	m	struct:mg_http_endpoint	file:
auth_file	mongoose.c	/^  char *auth_file;           \/* owned *\/$/;"	m	struct:mg_http_endpoint	file:
blk	mongoose.c	1177;"	d	file:
blk	mongoose.c	1184;"	d	file:
blk0	mongoose.c	/^static uint32_t blk0(union char64long16 *block, int i) {$/;"	f	file:
body_len	mongoose.c	/^  int64_t body_len; \/* How many bytes of chunked body was reassembled. *\/$/;"	m	struct:mg_http_proto_data_chuncked	file:
body_processed	mongoose.c	/^  size_t body_processed; \/* How many bytes of body we have processed. *\/$/;"	m	struct:mg_http_proto_data	file:
body_rcvd	mongoose.c	/^  size_t body_rcvd;      \/* How many bytes of body we have received. *\/$/;"	m	struct:mg_http_proto_data	file:
bool	mongoose.h	/^typedef int bool;$/;"	t
boolean	cJSON.h	/^CJSON_PUBLIC(cJSON *) cJSON_CreateBool(cJSON_bool boolean);$/;"	v
boundary	mongoose.c	/^  const char *boundary;$/;"	m	struct:mg_http_multipart_stream	file:
boundary_len	mongoose.c	/^  int boundary_len;$/;"	m	struct:mg_http_multipart_stream	file:
broadcast	websocket_server.c	/^static void broadcast(struct mg_connection *nc, const struct mg_str msg) {$/;"	f	file:
buf	mongoose.c	/^  char buf[MG_CGI_ENVIRONMENT_SIZE];       \/* Environment buffer *\/$/;"	m	struct:mg_cgi_env_block	file:
buffer	cJSON.c	/^    unsigned char *buffer;$/;"	m	struct:__anon3	file:
buffer_at_offset	cJSON.c	263;"	d	file:
buffer_skip_whitespace	cJSON.c	/^static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)$/;"	f	file:
byteReverse	mongoose.c	/^static void byteReverse(unsigned char *buf, unsigned longs) {$/;"	f	file:
c	cJSON.h	/^CJSON_PUBLIC(void) cJSON_Delete(cJSON *c);$/;"	v
c	mongoose.c	/^  struct mg_connection *c; \/* Connection to the client *\/$/;"	m	struct:socksdata	typeref:struct:socksdata::mg_connection	file:
c	mongoose.c	/^  unsigned char c[64];$/;"	m	union:char64long16	file:
cJSON	cJSON.h	/^typedef struct cJSON$/;"	s
cJSON	cJSON.h	/^} cJSON;$/;"	t	typeref:struct:cJSON
cJSON_AddArrayToObject	cJSON.c	/^CJSON_PUBLIC(cJSON*) cJSON_AddArrayToObject(cJSON * const object, const char * const name)$/;"	f
cJSON_AddBoolToObject	cJSON.c	/^CJSON_PUBLIC(cJSON*) cJSON_AddBoolToObject(cJSON * const object, const char * const name, const cJSON_bool boolean)$/;"	f
cJSON_AddFalseToObject	cJSON.c	/^CJSON_PUBLIC(cJSON*) cJSON_AddFalseToObject(cJSON * const object, const char * const name)$/;"	f
cJSON_AddItemReferenceToArray	cJSON.c	/^CJSON_PUBLIC(void) cJSON_AddItemReferenceToArray(cJSON *array, cJSON *item)$/;"	f
cJSON_AddItemReferenceToObject	cJSON.c	/^CJSON_PUBLIC(void) cJSON_AddItemReferenceToObject(cJSON *object, const char *string, cJSON *item)$/;"	f
cJSON_AddItemToArray	cJSON.c	/^CJSON_PUBLIC(void) cJSON_AddItemToArray(cJSON *array, cJSON *item)$/;"	f
cJSON_AddItemToObject	cJSON.c	/^CJSON_PUBLIC(void) cJSON_AddItemToObject(cJSON *object, const char *string, cJSON *item)$/;"	f
cJSON_AddItemToObjectCS	cJSON.c	/^CJSON_PUBLIC(void) cJSON_AddItemToObjectCS(cJSON *object, const char *string, cJSON *item)$/;"	f
cJSON_AddNullToObject	cJSON.c	/^CJSON_PUBLIC(cJSON*) cJSON_AddNullToObject(cJSON * const object, const char * const name)$/;"	f
cJSON_AddNumberToObject	cJSON.c	/^CJSON_PUBLIC(cJSON*) cJSON_AddNumberToObject(cJSON * const object, const char * const name, const double number)$/;"	f
cJSON_AddObjectToObject	cJSON.c	/^CJSON_PUBLIC(cJSON*) cJSON_AddObjectToObject(cJSON * const object, const char * const name)$/;"	f
cJSON_AddRawToObject	cJSON.c	/^CJSON_PUBLIC(cJSON*) cJSON_AddRawToObject(cJSON * const object, const char * const name, const char * const raw)$/;"	f
cJSON_AddStringToObject	cJSON.c	/^CJSON_PUBLIC(cJSON*) cJSON_AddStringToObject(cJSON * const object, const char * const name, const char * const string)$/;"	f
cJSON_AddTrueToObject	cJSON.c	/^CJSON_PUBLIC(cJSON*) cJSON_AddTrueToObject(cJSON * const object, const char * const name)$/;"	f
cJSON_Array	cJSON.h	95;"	d
cJSON_ArrayForEach	cJSON.h	275;"	d
cJSON_CreateArray	cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_CreateArray(void)$/;"	f
cJSON_CreateArrayReference	cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_CreateArrayReference(const cJSON *child) {$/;"	f
cJSON_CreateBool	cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_CreateBool(cJSON_bool b)$/;"	f
cJSON_CreateDoubleArray	cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_CreateDoubleArray(const double *numbers, int count)$/;"	f
cJSON_CreateFalse	cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_CreateFalse(void)$/;"	f
cJSON_CreateFloatArray	cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_CreateFloatArray(const float *numbers, int count)$/;"	f
cJSON_CreateIntArray	cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_CreateIntArray(const int *numbers, int count)$/;"	f
cJSON_CreateNull	cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_CreateNull(void)$/;"	f
cJSON_CreateNumber	cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_CreateNumber(double num)$/;"	f
cJSON_CreateObject	cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)$/;"	f
cJSON_CreateObjectReference	cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_CreateObjectReference(const cJSON *child)$/;"	f
cJSON_CreateRaw	cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_CreateRaw(const char *raw)$/;"	f
cJSON_CreateString	cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_CreateString(const char *string)$/;"	f
cJSON_CreateStringArray	cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_CreateStringArray(const char **strings, int count)$/;"	f
cJSON_CreateStringReference	cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_CreateStringReference(const char *string)$/;"	f
cJSON_CreateTrue	cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_CreateTrue(void)$/;"	f
cJSON_Delete	cJSON.c	/^CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)$/;"	f
cJSON_DeleteItemFromArray	cJSON.c	/^CJSON_PUBLIC(void) cJSON_DeleteItemFromArray(cJSON *array, int which)$/;"	f
cJSON_DeleteItemFromObject	cJSON.c	/^CJSON_PUBLIC(void) cJSON_DeleteItemFromObject(cJSON *object, const char *string)$/;"	f
cJSON_DeleteItemFromObjectCaseSensitive	cJSON.c	/^CJSON_PUBLIC(void) cJSON_DeleteItemFromObjectCaseSensitive(cJSON *object, const char *string)$/;"	f
cJSON_DetachItemFromArray	cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_DetachItemFromArray(cJSON *array, int which)$/;"	f
cJSON_DetachItemFromObject	cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_DetachItemFromObject(cJSON *object, const char *string)$/;"	f
cJSON_DetachItemFromObjectCaseSensitive	cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_DetachItemFromObjectCaseSensitive(cJSON *object, const char *string)$/;"	f
cJSON_DetachItemViaPointer	cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_DetachItemViaPointer(cJSON *parent, cJSON * const item)$/;"	f
cJSON_Duplicate	cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_Duplicate(const cJSON *item, cJSON_bool recurse)$/;"	f
cJSON_False	cJSON.h	90;"	d
cJSON_GetArrayItem	cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_GetArrayItem(const cJSON *array, int index)$/;"	f
cJSON_GetArraySize	cJSON.c	/^CJSON_PUBLIC(int) cJSON_GetArraySize(const cJSON *array)$/;"	f
cJSON_GetErrorPtr	cJSON.c	/^CJSON_PUBLIC(const char *) cJSON_GetErrorPtr(void)$/;"	f
cJSON_GetObjectItem	cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_GetObjectItem(const cJSON * const object, const char * const string)$/;"	f
cJSON_GetObjectItemCaseSensitive	cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_GetObjectItemCaseSensitive(const cJSON * const object, const char * const string)$/;"	f
cJSON_GetStringValue	cJSON.c	/^CJSON_PUBLIC(char *) cJSON_GetStringValue(cJSON *item) {$/;"	f
cJSON_Hooks	cJSON.h	/^typedef struct cJSON_Hooks$/;"	s
cJSON_Hooks	cJSON.h	/^} cJSON_Hooks;$/;"	t	typeref:struct:cJSON_Hooks
cJSON_InitHooks	cJSON.c	/^CJSON_PUBLIC(void) cJSON_InitHooks(cJSON_Hooks* hooks)$/;"	f
cJSON_InsertItemInArray	cJSON.c	/^CJSON_PUBLIC(void) cJSON_InsertItemInArray(cJSON *array, int which, cJSON *newitem)$/;"	f
cJSON_Invalid	cJSON.h	89;"	d
cJSON_IsReference	cJSON.h	99;"	d
cJSON_Minify	cJSON.c	/^CJSON_PUBLIC(void) cJSON_Minify(char *json)$/;"	f
cJSON_NULL	cJSON.h	92;"	d
cJSON_New_Item	cJSON.c	/^static cJSON *cJSON_New_Item(const internal_hooks * const hooks)$/;"	f	file:
cJSON_Number	cJSON.h	93;"	d
cJSON_Object	cJSON.h	96;"	d
cJSON_Parse	cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)$/;"	f
cJSON_ParseWithOpts	cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)$/;"	f
cJSON_Print	cJSON.c	/^CJSON_PUBLIC(char *) cJSON_Print(const cJSON *item)$/;"	f
cJSON_PrintBuffered	cJSON.c	/^CJSON_PUBLIC(char *) cJSON_PrintBuffered(const cJSON *item, int prebuffer, cJSON_bool fmt)$/;"	f
cJSON_PrintUnformatted	cJSON.c	/^CJSON_PUBLIC(char *) cJSON_PrintUnformatted(const cJSON *item)$/;"	f
cJSON_Raw	cJSON.h	97;"	d
cJSON_ReplaceItemInArray	cJSON.c	/^CJSON_PUBLIC(void) cJSON_ReplaceItemInArray(cJSON *array, int which, cJSON *newitem)$/;"	f
cJSON_ReplaceItemInObject	cJSON.c	/^CJSON_PUBLIC(void) cJSON_ReplaceItemInObject(cJSON *object, const char *string, cJSON *newitem)$/;"	f
cJSON_ReplaceItemInObjectCaseSensitive	cJSON.c	/^CJSON_PUBLIC(void) cJSON_ReplaceItemInObjectCaseSensitive(cJSON *object, const char *string, cJSON *newitem)$/;"	f
cJSON_SetIntValue	cJSON.h	269;"	d
cJSON_SetNumberHelper	cJSON.c	/^CJSON_PUBLIC(double) cJSON_SetNumberHelper(cJSON *object, double number)$/;"	f
cJSON_SetNumberValue	cJSON.h	272;"	d
cJSON_String	cJSON.h	94;"	d
cJSON_StringIsConst	cJSON.h	100;"	d
cJSON_True	cJSON.h	91;"	d
cJSON_Version	cJSON.c	/^CJSON_PUBLIC(const char*) cJSON_Version(void)$/;"	f
cJSON__h	cJSON.h	24;"	d
cJSON_bool	cJSON.h	/^typedef int cJSON_bool;$/;"	t
cJSON_free	cJSON.c	/^CJSON_PUBLIC(void) cJSON_free(void *object)$/;"	f
cJSON_malloc	cJSON.c	/^CJSON_PUBLIC(void *) cJSON_malloc(size_t size)$/;"	f
cJSON_strdup	cJSON.c	/^static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)$/;"	f	file:
c_itoa	mongoose.c	/^static int c_itoa(char *buf, size_t buf_size, int64_t num, int base, int flags,$/;"	f	file:
c_snprintf	mongoose.c	/^int c_snprintf(char *buf, size_t buf_size, const char *fmt, ...) {$/;"	f
c_strnlen	mongoose.c	/^size_t c_strnlen(const char *s, size_t maxlen) {$/;"	f
c_strnstr	mongoose.c	/^const char *c_strnstr(const char *s, const char *find, size_t slen) {$/;"	f
c_vsnprintf	mongoose.c	/^int c_vsnprintf(char *buf, size_t buf_size, const char *fmt, va_list ap) {$/;"	f
ca_cert	mongoose.c	/^  mbedtls_x509_crt *ca_cert;$/;"	m	struct:mg_ssl_if_ctx	file:
ca_chain_file	mongoose.c	/^  char *ca_chain_file;$/;"	m	struct:mg_ssl_if_ctx	file:
callback	mongoose.c	/^  mg_event_handler_t callback;$/;"	m	struct:ctl_msg	file:
callback	mongoose.c	/^  mg_resolve_callback_t callback;$/;"	m	struct:mg_resolve_async_request	file:
can_access_at_index	cJSON.c	260;"	d	file:
can_read	cJSON.c	258;"	d	file:
cannot_access_at_index	cJSON.c	261;"	d	file:
case_insensitive_strcmp	cJSON.c	/^static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)$/;"	f	file:
cast_away_const	cJSON.c	/^static void* cast_away_const(const void* string)$/;"	f	file:
cb	mongoose.c	/^  void (*cb)(struct mg_mgr *mgr, void *arg);$/;"	m	struct:mg_q_msg	file:
cert	mongoose.c	/^  mbedtls_x509_crt *cert;$/;"	m	struct:mg_ssl_if_ctx	file:
cgi	mongoose.c	/^  struct mg_http_proto_data_cgi cgi;$/;"	m	struct:mg_http_proto_data	typeref:struct:mg_http_proto_data::mg_http_proto_data_cgi	file:
cgi_nc	mongoose.c	/^  struct mg_connection *cgi_nc;$/;"	m	struct:mg_http_proto_data_cgi	typeref:struct:mg_http_proto_data_cgi::mg_connection	file:
char64long16	mongoose.c	/^union char64long16 {$/;"	u	file:
child	cJSON.h	/^    struct cJSON *child;$/;"	m	struct:cJSON	typeref:struct:cJSON::cJSON
child	cJSON.h	/^CJSON_PUBLIC(cJSON *) cJSON_CreateArrayReference(const cJSON *child);$/;"	v
child	cJSON.h	/^CJSON_PUBLIC(cJSON *) cJSON_CreateObjectReference(const cJSON *child);$/;"	v
chunk	mongoose.c	/^  struct mg_http_proto_data_chuncked chunk;$/;"	m	struct:mg_http_proto_data	typeref:struct:mg_http_proto_data::mg_http_proto_data_chuncked	file:
cipher_suites	mongoose.c	/^  struct mbuf cipher_suites;$/;"	m	struct:mg_ssl_if_ctx	typeref:struct:mg_ssl_if_ctx::mbuf	file:
cjson_min	cJSON.c	1085;"	d	file:
cl	mongoose.c	/^  int64_t cl;    \/* Content-Length. How many bytes to send. *\/$/;"	m	struct:mg_http_proto_data_file	file:
close	mongoose.c	/^int close(int fd) {$/;"	f
closedir	mongoose.c	/^int closedir(DIR *d) {$/;"	f
closedir	mongoose.c	/^int closedir(DIR *dir) {$/;"	f
closesocket	mongoose.h	462;"	d
coap_add_opt_info	mongoose.c	/^static char *coap_add_opt_info(char *ptr, uint16_t val, size_t len) {$/;"	f	file:
coap_add_uint16	mongoose.c	/^static char *coap_add_uint16(char *ptr, uint16_t val) {$/;"	f	file:
coap_calculate_packet_size	mongoose.c	/^static uint32_t coap_calculate_packet_size(struct mg_coap_message *cm,$/;"	f	file:
coap_get_ext_opt	mongoose.c	/^static int coap_get_ext_opt(char *ptr, struct mbuf *io, uint16_t *opt_info) {$/;"	f	file:
coap_get_ext_opt_size	mongoose.c	/^static size_t coap_get_ext_opt_size(uint32_t value) {$/;"	f	file:
coap_get_options	mongoose.c	/^static char *coap_get_options(char *ptr, struct mbuf *io,$/;"	f	file:
coap_get_token	mongoose.c	/^static char *coap_get_token(char *ptr, struct mbuf *io,$/;"	f	file:
coap_handler	mongoose.c	/^static void coap_handler(struct mg_connection *nc, int ev,$/;"	f	file:
coap_parse_header	mongoose.c	/^static char *coap_parse_header(char *ptr, struct mbuf *io,$/;"	f	file:
coap_split_opt	mongoose.c	/^static int coap_split_opt(uint32_t value, uint8_t *base, uint16_t *ext) {$/;"	f	file:
conf	mongoose.c	/^  mbedtls_ssl_config *conf;$/;"	m	struct:mg_ssl_if_ctx	file:
content	cJSON.c	/^    const unsigned char *content;$/;"	m	struct:__anon2	file:
count	mongoose.c	/^  int count;$/;"	m	struct:sntp_data	file:
create_reference	cJSON.c	/^static cJSON *create_reference(const cJSON *item, const internal_hooks * const hooks)$/;"	f	file:
cs_base64_decode	mongoose.c	/^int cs_base64_decode(const unsigned char *s, int len, char *dst, int *dec_len) {$/;"	f
cs_base64_emit_chunk	mongoose.c	/^static void cs_base64_emit_chunk(struct cs_base64_ctx *ctx) {$/;"	f	file:
cs_base64_emit_code	mongoose.c	/^static void cs_base64_emit_code(struct cs_base64_ctx *ctx, int v) {$/;"	f	file:
cs_base64_encode	mongoose.c	/^void cs_base64_encode(const unsigned char *src, int src_len, char *dst) {$/;"	f
cs_base64_finish	mongoose.c	/^void cs_base64_finish(struct cs_base64_ctx *ctx) {$/;"	f
cs_base64_init	mongoose.c	/^void cs_base64_init(struct cs_base64_ctx *ctx, cs_base64_putc_t b64_putc,$/;"	f
cs_base64_update	mongoose.c	/^void cs_base64_update(struct cs_base64_ctx *ctx, const char *str, size_t len) {$/;"	f
cs_dirent_dummy	mongoose.c	/^typedef int cs_dirent_dummy;$/;"	t	file:
cs_fprint_base64	mongoose.c	/^void cs_fprint_base64(FILE *f, const unsigned char *src, int src_len) {$/;"	f
cs_from_hex	mongoose.c	/^void cs_from_hex(char *to, const char *p, size_t len) {$/;"	f
cs_hmac_sha1	mongoose.c	/^void cs_hmac_sha1(const unsigned char *key, size_t keylen,$/;"	f
cs_log_level	mongoose.c	/^enum cs_log_level {$/;"	g	file:
cs_log_print_prefix	mongoose.c	/^int cs_log_print_prefix(enum cs_log_level level, const char *file, int ln) {$/;"	f
cs_log_printf	mongoose.c	/^void cs_log_printf(const char *fmt, ...) {$/;"	f
cs_log_set_file	mongoose.c	/^void cs_log_set_file(FILE *file) {$/;"	f
cs_log_set_file_level	mongoose.c	/^void cs_log_set_file_level(const char *file_level) {$/;"	f
cs_log_set_level	mongoose.c	/^void cs_log_set_level(enum cs_log_level level) {$/;"	f
cs_md5	mongoose.c	/^void cs_md5(char buf[33], ...) {$/;"	f
cs_md5_final	mongoose.c	/^void cs_md5_final(unsigned char digest[16], cs_md5_ctx *ctx) {$/;"	f
cs_md5_init	mongoose.c	/^void cs_md5_init(cs_md5_ctx *ctx) {$/;"	f
cs_md5_transform	mongoose.c	/^static void cs_md5_transform(uint32_t buf[4], uint32_t const in[16]) {$/;"	f	file:
cs_md5_update	mongoose.c	/^void cs_md5_update(cs_md5_ctx *ctx, const unsigned char *buf, size_t len) {$/;"	f
cs_sha1_final	mongoose.c	/^void cs_sha1_final(unsigned char digest[20], cs_sha1_ctx *context) {$/;"	f
cs_sha1_init	mongoose.c	/^void cs_sha1_init(cs_sha1_ctx *context) {$/;"	f
cs_sha1_transform	mongoose.c	/^void cs_sha1_transform(uint32_t state[5], const unsigned char buffer[64]) {$/;"	f
cs_sha1_update	mongoose.c	/^void cs_sha1_update(cs_sha1_ctx *context, const unsigned char *data,$/;"	f
cs_stat_t	mongoose.h	/^typedef struct _stati64 cs_stat_t;$/;"	t	typeref:struct:_stati64
cs_stat_t	mongoose.h	/^typedef struct stat cs_stat_t;$/;"	t	typeref:struct:stat
cs_time	mongoose.c	/^double cs_time(void) {$/;"	f
cs_timegm	mongoose.c	/^double cs_timegm(const struct tm *tm) {$/;"	f
cs_to64	mongoose.c	/^int64_t cs_to64(const char *s) {$/;"	f
cs_to_hex	mongoose.c	/^void cs_to_hex(char *to, const unsigned char *p, size_t len) {$/;"	f
ctl_msg	mongoose.c	/^struct ctl_msg {$/;"	s	file:
d	mongoose.c	/^  DIR d;$/;"	m	struct:win32_dir	file:
d_ino	mongoose.c	/^  int d_ino;$/;"	m	struct:dirent	file:
d_name	mongoose.c	/^  char d_name[256];$/;"	m	struct:dirent	file:
d_name	mongoose.c	/^  char d_name[MAX_PATH];$/;"	m	struct:dirent	file:
data	mongoose.c	/^  const void *data;$/;"	m	struct:mg_lwip_tcp_write_ctx	file:
data	mongoose.c	/^  void *data;$/;"	m	struct:mg_resolve_async_request	file:
data_avail	mongoose.c	/^  int data_avail;$/;"	m	struct:mg_http_multipart_stream	file:
deallocate	cJSON.c	/^    void (CJSON_CDECL *deallocate)(void *pointer);$/;"	m	struct:internal_hooks	file:
deliver_chunk	mongoose.c	/^static void deliver_chunk(struct mg_connection *c, struct http_message *hm,$/;"	f	file:
depth	cJSON.c	/^    size_t depth; \/* How deeply nested (in arrays\/objects) is the input at the current offset. *\/$/;"	m	struct:__anon2	file:
depth	cJSON.c	/^    size_t depth; \/* current nesting depth (for formatted printing) *\/$/;"	m	struct:__anon3	file:
dirent	mongoose.c	/^struct dirent {$/;"	s	file:
disband	mongoose.c	/^static void disband(struct mg_connection *c) {$/;"	f	file:
dns_handler	mongoose.c	/^static void dns_handler(struct mg_connection *nc, int ev,$/;"	f	file:
do_ssi_exec	mongoose.c	/^static void do_ssi_exec(struct mg_connection *nc, char *tag) {$/;"	f	file:
draining_rx_chain	mongoose.c	/^  int draining_rx_chain;$/;"	m	struct:mg_lwip_conn_state	file:
drop_dir	mongoose.c	/^const char *drop_dir(const char *fname, bool *is_slfs) {$/;"	f
dummy	mongoose.c	/^typedef struct { int dummy; } DIR;$/;"	m	struct:__anon4	file:
endpoint_handler	mongoose.c	/^  mg_event_handler_t endpoint_handler;$/;"	m	struct:mg_http_proto_data	file:
endpoints	mongoose.c	/^  struct mg_http_endpoint *endpoints;$/;"	m	struct:mg_http_proto_data	typeref:struct:mg_http_proto_data::mg_http_endpoint	file:
ensure	cJSON.c	/^static unsigned char* ensure(printbuffer * const p, size_t needed)$/;"	f	file:
err	mongoose.c	/^  enum mg_resolve_err err;$/;"	m	struct:mg_resolve_async_request	typeref:enum:mg_resolve_async_request::mg_resolve_err	file:
err	mongoose.c	/^  err_t err;$/;"	m	struct:mg_lwip_conn_state	file:
error	cJSON.c	/^} error;$/;"	t	typeref:struct:__anon1	file:
ev_handler	websocket_server.c	/^static void ev_handler(struct mg_connection *nc, int ev, void *ev_data) {$/;"	f	file:
ext_len	mongoose.c	/^  size_t ext_len;$/;"	m	struct:__anon5	file:
extension	mongoose.c	/^  const char *extension;$/;"	m	struct:__anon5	file:
false	cJSON.c	62;"	d	file:
fd_type	mongoose.c	/^enum fd_type {$/;"	g	file:
fd_type	mongoose.c	/^static int fd_type(int fd) {$/;"	f	file:
fh	mongoose.c	/^  _i32 fh;$/;"	m	struct:sl_fd_info	file:
file	mongoose.c	/^  struct mg_http_proto_data_file file;$/;"	m	struct:mg_http_proto_data	typeref:struct:mg_http_proto_data::mg_http_proto_data_file	file:
file_name	mongoose.c	/^  const char *file_name;$/;"	m	struct:mg_http_multipart_stream	file:
file_upload_state	mongoose.c	/^struct file_upload_state {$/;"	s	file:
fileno	mongoose.h	258;"	d
fileno	mongoose.h	695;"	d
fileno	mongoose.h	818;"	d
fileno	mongoose.h	918;"	d
finished	mongoose.c	/^  int finished;$/;"	m	struct:mg_http_proto_data	file:
flags	mongoose.c	/^  uint16_t flags;$/;"	m	struct:mg_dns_header	file:
flags	mongoose.c	/^  uint32_t flags;$/;"	m	struct:sl_file_open_info	file:
fn	mongoose.c	/^  void (*fn)(void *);$/;"	m	struct:mg_lwip_netif_tcpip_call_ctx	file:
format	cJSON.c	/^    cJSON_bool format; \/* is this print a formatted print *\/$/;"	m	struct:__anon3	file:
fourbit	mongoose.c	/^static int fourbit(int ch) {$/;"	f	file:
fp	mongoose.c	/^  FILE *fp;      \/* Opened file. *\/$/;"	m	struct:mg_http_proto_data_file	file:
fp	mongoose.c	/^  FILE *fp;$/;"	m	struct:file_upload_state	file:
fprint_str	mongoose.c	/^void fprint_str(FILE *fp, const char *str) {$/;"	f
free_fn	cJSON.h	/^      void (CJSON_CDECL *free_fn)(void *ptr);$/;"	m	struct:cJSON_Hooks
from_b64	mongoose.c	/^static unsigned char from_b64(unsigned char ch) {$/;"	f	file:
fs_slfs_close	mongoose.c	/^int fs_slfs_close(int fd) {$/;"	f
fs_slfs_find_foi	mongoose.c	/^static struct sl_file_open_info *fs_slfs_find_foi(const char *name,$/;"	f	file:
fs_slfs_fstat	mongoose.c	/^int fs_slfs_fstat(int fd, struct stat *s) {$/;"	f
fs_slfs_lseek	mongoose.c	/^off_t fs_slfs_lseek(int fd, off_t offset, int whence) {$/;"	f
fs_slfs_open	mongoose.c	/^int fs_slfs_open(const char *pathname, int flags, mode_t mode) {$/;"	f
fs_slfs_read	mongoose.c	/^ssize_t fs_slfs_read(int fd, void *buf, size_t count) {$/;"	f
fs_slfs_rename	mongoose.c	/^int fs_slfs_rename(const char *from, const char *to) {$/;"	f
fs_slfs_set_file_flags	mongoose.c	/^void fs_slfs_set_file_flags(const char *name, uint32_t flags, uint32_t *token) {$/;"	f
fs_slfs_set_file_size	mongoose.c	/^void fs_slfs_set_file_size(const char *name, size_t size) {$/;"	f
fs_slfs_stat	mongoose.c	/^int fs_slfs_stat(const char *pathname, struct stat *s) {$/;"	f
fs_slfs_unlink	mongoose.c	/^int fs_slfs_unlink(const char *pathname) {$/;"	f
fs_slfs_unset_file_flags	mongoose.c	/^void fs_slfs_unset_file_flags(const char *name) {$/;"	f
fs_slfs_write	mongoose.c	/^ssize_t fs_slfs_write(int fd, const void *buf, size_t count) {$/;"	f
fseeko	mongoose.h	261;"	d
fseeko	mongoose.h	263;"	d
get_array_item	cJSON.c	/^static cJSON* get_array_item(const cJSON *array, size_t index)$/;"	f	file:
get_decimal_point	cJSON.c	/^static unsigned char get_decimal_point(void)$/;"	f	file:
get_object_item	cJSON.c	/^static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)$/;"	f	file:
gettimeofday	mongoose.c	/^int gettimeofday(struct timeval *tp, void *tzp) {$/;"	f
getu16	mongoose.c	/^static uint16_t getu16(const char *p) {$/;"	f	file:
global_error	cJSON.c	/^static error global_error = { NULL, 0 };$/;"	v	file:
global_hooks	cJSON.c	/^static internal_hooks global_hooks = { internal_malloc, internal_free, internal_realloc };$/;"	v	file:
gmtime_r	mongoose.h	355;"	d
hPipe	mongoose.c	/^  HANDLE hPipe;$/;"	m	struct:mg_threadparam	file:
hander	mongoose.c	/^  mg_event_handler_t hander;$/;"	m	struct:sntp_data	file:
handle	mongoose.c	/^  HANDLE handle;$/;"	m	struct:win32_dir	file:
handler	mongoose.c	/^  mg_event_handler_t handler;$/;"	m	struct:mg_http_endpoint	file:
hooks	cJSON.c	/^    internal_hooks hooks;$/;"	m	struct:__anon2	file:
hooks	cJSON.c	/^    internal_hooks hooks;$/;"	m	struct:__anon3	file:
hooks	cJSON.h	/^CJSON_PUBLIC(void) cJSON_InitHooks(cJSON_Hooks* hooks);$/;"	v
identity_len	mongoose.c	/^  size_t identity_len;$/;"	m	struct:mg_ssl_if_ctx	file:
in_addr_t	mongoose.h	/^typedef uint32_t in_addr_t;$/;"	t
inet_ntoa	mongoose.c	/^char *inet_ntoa(struct in_addr in) {$/;"	f
inet_ntoa	mongoose.c	/^char *inet_ntoa(struct in_addr n) {$/;"	f
inet_ntop	mongoose.c	/^const char *inet_ntop(int af, const void *src, char *dst, socklen_t size) {$/;"	f
inet_ntop	mongoose.h	600;"	d
inet_pton	mongoose.c	/^int inet_pton(int af, const char *src, void *dst) {$/;"	f
inet_pton	mongoose.h	603;"	d
info	mongoose.c	/^  WIN32_FIND_DATAW info;$/;"	m	struct:win32_dir	file:
int16_t	mongoose.h	/^typedef short int16_t;$/;"	t
int32_t	mongoose.h	/^typedef int int32_t;$/;"	t
int64_t	mongoose.h	/^typedef __int64 int64_t;$/;"	t
int8_t	mongoose.h	/^typedef signed char int8_t;$/;"	t
internal_free	cJSON.c	/^static void CJSON_CDECL internal_free(void *pointer)$/;"	f	file:
internal_free	cJSON.c	143;"	d	file:
internal_hooks	cJSON.c	/^typedef struct internal_hooks$/;"	s	file:
internal_hooks	cJSON.c	/^} internal_hooks;$/;"	t	typeref:struct:internal_hooks	file:
internal_malloc	cJSON.c	/^static void * CJSON_CDECL internal_malloc(size_t size)$/;"	f	file:
internal_malloc	cJSON.c	142;"	d	file:
internal_realloc	cJSON.c	/^static void * CJSON_CDECL internal_realloc(void *pointer, size_t size)$/;"	f	file:
internal_realloc	cJSON.c	144;"	d	file:
intptr_t	mongoose.c	2254;"	d	file:
intptr_t	mongoose.h	/^typedef long intptr_t;$/;"	t
ip	mongoose.c	/^  ip_addr_t *ip;$/;"	m	struct:udp_sendto_ctx	file:
ip_2_ip4	mongoose.c	14905;"	d	file:
ip_2_ip4	mongoose.c	14907;"	d	file:
is_websocket	websocket_server.c	/^static int is_websocket(const struct mg_connection *nc) {$/;"	f	file:
isbyte	mongoose.c	/^static int isbyte(int n) {$/;"	f	file:
item	cJSON.h	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsArray(const cJSON * const item);$/;"	v
item	cJSON.h	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsBool(const cJSON * const item);$/;"	v
item	cJSON.h	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsFalse(const cJSON * const item);$/;"	v
item	cJSON.h	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsInvalid(const cJSON * const item);$/;"	v
item	cJSON.h	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsNull(const cJSON * const item);$/;"	v
item	cJSON.h	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(const cJSON * const item);$/;"	v
item	cJSON.h	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsObject(const cJSON * const item);$/;"	v
item	cJSON.h	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsRaw(const cJSON * const item);$/;"	v
item	cJSON.h	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsString(const cJSON * const item);$/;"	v
item	cJSON.h	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsTrue(const cJSON * const item);$/;"	v
item	cJSON.h	/^CJSON_PUBLIC(char *) cJSON_GetStringValue(cJSON *item);$/;"	v
item	cJSON.h	/^CJSON_PUBLIC(char *) cJSON_Print(const cJSON *item);$/;"	v
item	cJSON.h	/^CJSON_PUBLIC(char *) cJSON_PrintUnformatted(const cJSON *item);$/;"	v
json	cJSON.c	/^    const unsigned char *json;$/;"	m	struct:__anon1	file:
keepalive	mongoose.c	/^  int keepalive; \/* Keep connection open after sending. *\/$/;"	m	struct:mg_http_proto_data_file	file:
key	mongoose.c	/^  mbedtls_pk_context *key;$/;"	m	struct:mg_ssl_if_ctx	file:
l	mongoose.c	/^  uint32_t l[16];$/;"	m	union:char64long16	file:
last_ssl_write_size	mongoose.c	/^  int last_ssl_write_size;$/;"	m	struct:mg_lwip_conn_state	file:
last_time	mongoose.c	/^  time_t last_time;$/;"	m	struct:mg_resolve_async_request	file:
lc	mongoose.c	/^  struct mg_connection *lc;$/;"	m	struct:mg_lwip_conn_state	typeref:struct:mg_lwip_conn_state::mg_connection	file:
len	mongoose.c	/^  int len;                                 \/* Space taken *\/$/;"	m	struct:mg_cgi_env_block	file:
len	mongoose.c	/^  size_t len;$/;"	m	struct:altbuf	file:
len	mongoose.c	/^  size_t len;$/;"	m	struct:tcp_recved_ctx	file:
len	mongoose.c	/^  uint16_t len;$/;"	m	struct:mg_lwip_tcp_write_ctx	file:
length	cJSON.c	/^    size_t length;$/;"	m	struct:__anon2	file:
length	cJSON.c	/^    size_t length;$/;"	m	struct:__anon3	file:
lfn	mongoose.c	/^  char *lfn;$/;"	m	struct:file_upload_state	file:
linked_conn	mongoose.c	/^  struct mg_connection *linked_conn;$/;"	m	struct:mg_reverse_proxy_data	typeref:struct:mg_reverse_proxy_data::mg_connection	file:
lseek	mongoose.c	/^off_t lseek(int fd, off_t offset, int whence) {$/;"	f
m	mongoose.c	/^  struct mbuf m;$/;"	m	struct:altbuf	typeref:struct:altbuf::mbuf	file:
main	websocket_server.c	/^int main(void) {$/;"	f
malloc_fn	cJSON.h	/^      void *(CJSON_CDECL *malloc_fn)(size_t sz);$/;"	m	struct:cJSON_Hooks
mask	mongoose.c	/^  uint32_t mask;$/;"	m	struct:ws_mask_ctx	file:
max_retries	mongoose.c	/^  int max_retries;$/;"	m	struct:mg_resolve_async_request	file:
mbuf_append	mongoose.c	/^size_t mbuf_append(struct mbuf *a, const void *buf, size_t len) {$/;"	f
mbuf_append_and_free	mongoose.c	/^size_t mbuf_append_and_free(struct mbuf *a, void *data, size_t len) {$/;"	f
mbuf_clear	mongoose.c	/^void mbuf_clear(struct mbuf *mb) {$/;"	f
mbuf_free	mongoose.c	/^void mbuf_free(struct mbuf *mbuf) {$/;"	f
mbuf_init	mongoose.c	/^void mbuf_init(struct mbuf *mbuf, size_t initial_size) {$/;"	f
mbuf_insert	mongoose.c	/^size_t mbuf_insert(struct mbuf *a, size_t off, const void *buf, size_t len) {$/;"	f
mbuf_move	mongoose.c	/^void mbuf_move(struct mbuf *from, struct mbuf *to) {$/;"	f
mbuf_remove	mongoose.c	/^void mbuf_remove(struct mbuf *mb, size_t n) {$/;"	f
mbuf_resize	mongoose.c	/^void mbuf_resize(struct mbuf *a, size_t new_size) {$/;"	f
mbuf_trim	mongoose.c	/^void mbuf_trim(struct mbuf *mbuf) {$/;"	f
message	mongoose.c	/^  char message[MG_CTL_MSG_MESSAGE_SIZE];$/;"	m	struct:ctl_msg	file:
mg_abs_path	mongoose.c	/^static void mg_abs_path(const char *utf8_path, char *abs_path, size_t len) {$/;"	f	file:
mg_accept_conn	mongoose.c	/^static int mg_accept_conn(struct mg_connection *lc) {$/;"	f	file:
mg_add_conn	mongoose.c	/^MG_INTERNAL void mg_add_conn(struct mg_mgr *mgr, struct mg_connection *c) {$/;"	f
mg_add_sock	mongoose.c	/^struct mg_connection *mg_add_sock(struct mg_mgr *s, sock_t sock,$/;"	f
mg_add_sock_opt	mongoose.c	/^struct mg_connection *mg_add_sock_opt(struct mg_mgr *s, sock_t sock,$/;"	f
mg_add_to_set	mongoose.c	/^void mg_add_to_set(sock_t sock, fd_set *set, sock_t *max_fd) {$/;"	f
mg_addenv	mongoose.c	/^static char *mg_addenv(struct mg_cgi_env_block *block, const char *fmt, ...) {$/;"	f	file:
mg_addenv2	mongoose.c	/^static void mg_addenv2(struct mg_cgi_env_block *blk, const char *name) {$/;"	f	file:
mg_asprintf	mongoose.c	/^int mg_asprintf(char **buf, size_t size, const char *fmt, ...) {$/;"	f
mg_assemble_uri	mongoose.c	/^int mg_assemble_uri(const struct mg_str *scheme, const struct mg_str *user_info,$/;"	f
mg_avprintf	mongoose.c	/^int mg_avprintf(char **buf, size_t size, const char *fmt, va_list ap) {$/;"	f
mg_base64_decode	mongoose.c	/^int mg_base64_decode(const unsigned char *s, int len, char *dst) {$/;"	f
mg_base64_encode	mongoose.c	/^void mg_base64_encode(const unsigned char *src, int src_len, char *dst) {$/;"	f
mg_basic_auth_header	mongoose.c	/^void mg_basic_auth_header(const struct mg_str user, const struct mg_str pass,$/;"	f
mg_bind	mongoose.c	/^struct mg_connection *mg_bind(struct mg_mgr *srv, const char *address,$/;"	f
mg_bind_opt	mongoose.c	/^struct mg_connection *mg_bind_opt(struct mg_mgr *mgr, const char *address,$/;"	f
mg_broadcast	mongoose.c	/^void mg_broadcast(struct mg_mgr *mgr, mg_event_handler_t cb, void *data,$/;"	f
mg_calculate_delay	mongoose.c	/^static uint64_t mg_calculate_delay(uint64_t t1, uint64_t t2, uint64_t t3) {$/;"	f	file:
mg_call	mongoose.c	/^MG_INTERNAL void mg_call(struct mg_connection *nc,$/;"	f
mg_casecmp	mongoose.c	/^int mg_casecmp(const char *s1, const char *s2) {$/;"	f
mg_cgi_env_block	mongoose.c	/^struct mg_cgi_env_block {$/;"	s	file:
mg_cgi_ev_handler	mongoose.c	/^static void mg_cgi_ev_handler(struct mg_connection *cgi_nc, int ev,$/;"	f	file:
mg_check_digest_auth	mongoose.c	/^int mg_check_digest_auth(struct mg_str method, struct mg_str uri,$/;"	f
mg_check_ip_acl	mongoose.c	/^int mg_check_ip_acl(const char *acl, uint32_t remote_ip) {$/;"	f
mg_check_nonce	mongoose.c	/^static int mg_check_nonce(const char *nonce) {$/;"	f	file:
mg_close_conn	mongoose.c	/^void mg_close_conn(struct mg_connection *conn) {$/;"	f
mg_coap_add_option	mongoose.c	/^struct mg_coap_option *mg_coap_add_option(struct mg_coap_message *cm,$/;"	f
mg_coap_compose	mongoose.c	/^uint32_t mg_coap_compose(struct mg_coap_message *cm, struct mbuf *io) {$/;"	f
mg_coap_free_options	mongoose.c	/^void mg_coap_free_options(struct mg_coap_message *cm) {$/;"	f
mg_coap_parse	mongoose.c	/^uint32_t mg_coap_parse(struct mbuf *io, struct mg_coap_message *cm) {$/;"	f
mg_coap_send_ack	mongoose.c	/^uint32_t mg_coap_send_ack(struct mg_connection *nc, uint16_t msg_id) {$/;"	f
mg_coap_send_message	mongoose.c	/^uint32_t mg_coap_send_message(struct mg_connection *nc,$/;"	f
mg_conn_addr_to_str	mongoose.c	/^int mg_conn_addr_to_str(struct mg_connection *nc, char *buf, size_t len,$/;"	f
mg_connect	mongoose.c	/^struct mg_connection *mg_connect(struct mg_mgr *mgr, const char *address,$/;"	f
mg_connect_http	mongoose.c	/^struct mg_connection *mg_connect_http($/;"	f
mg_connect_http_base	mongoose.c	/^struct mg_connection *mg_connect_http_base($/;"	f
mg_connect_http_opt	mongoose.c	/^struct mg_connection *mg_connect_http_opt($/;"	f
mg_connect_opt	mongoose.c	/^struct mg_connection *mg_connect_opt(struct mg_mgr *mgr, const char *address,$/;"	f
mg_connect_ws	mongoose.c	/^struct mg_connection *mg_connect_ws($/;"	f
mg_connect_ws_opt	mongoose.c	/^struct mg_connection *mg_connect_ws_opt($/;"	f
mg_create_connection	mongoose.c	/^MG_INTERNAL struct mg_connection *mg_create_connection($/;"	f
mg_create_connection_base	mongoose.c	/^MG_INTERNAL struct mg_connection *mg_create_connection_base($/;"	f
mg_create_itermediate_directories	mongoose.c	/^static int mg_create_itermediate_directories(const char *path) {$/;"	f	file:
mg_default_iface_vtable	mongoose.c	/^const struct mg_iface_vtable mg_default_iface_vtable = MG_LWIP_IFACE_VTABLE;$/;"	v	typeref:struct:mg_iface_vtable
mg_default_iface_vtable	mongoose.c	/^const struct mg_iface_vtable mg_default_iface_vtable = MG_NULL_IFACE_VTABLE;$/;"	v	typeref:struct:mg_iface_vtable
mg_default_iface_vtable	mongoose.c	/^const struct mg_iface_vtable mg_default_iface_vtable = MG_PIC32_IFACE_VTABLE;$/;"	v	typeref:struct:mg_iface_vtable
mg_default_iface_vtable	mongoose.c	/^const struct mg_iface_vtable mg_default_iface_vtable = MG_SL_IFACE_VTABLE;$/;"	v	typeref:struct:mg_iface_vtable
mg_default_iface_vtable	mongoose.c	/^const struct mg_iface_vtable mg_default_iface_vtable = MG_SOCKET_IFACE_VTABLE;$/;"	v	typeref:struct:mg_iface_vtable
mg_default_session_id_context	mongoose.c	/^static const char *mg_default_session_id_context = "mongoose";$/;"	v	file:
mg_deliver_websocket_data	mongoose.c	/^static int mg_deliver_websocket_data(struct mg_connection *nc) {$/;"	f	file:
mg_destroy_conn	mongoose.c	/^void mg_destroy_conn(struct mg_connection *conn, int destroy_if) {$/;"	f
mg_dns_copy_questions	mongoose.c	/^int mg_dns_copy_questions(struct mbuf *io, struct mg_dns_message *msg) {$/;"	f
mg_dns_create_reply	mongoose.c	/^struct mg_dns_reply mg_dns_create_reply(struct mbuf *io,$/;"	f
mg_dns_encode_name	mongoose.c	/^int mg_dns_encode_name(struct mbuf *io, const char *name, size_t len) {$/;"	f
mg_dns_encode_name_s	mongoose.c	/^int mg_dns_encode_name_s(struct mbuf *io, struct mg_str name) {$/;"	f
mg_dns_encode_record	mongoose.c	/^int mg_dns_encode_record(struct mbuf *io, struct mg_dns_resource_record *rr,$/;"	f
mg_dns_header	mongoose.c	/^struct mg_dns_header {$/;"	s	file:
mg_dns_insert_header	mongoose.c	/^int mg_dns_insert_header(struct mbuf *io, size_t pos,$/;"	f
mg_dns_next_record	mongoose.c	/^struct mg_dns_resource_record *mg_dns_next_record($/;"	f
mg_dns_parse_record_data	mongoose.c	/^int mg_dns_parse_record_data(struct mg_dns_message *msg,$/;"	f
mg_dns_reply_record	mongoose.c	/^int mg_dns_reply_record(struct mg_dns_reply *reply,$/;"	f
mg_dns_send_reply	mongoose.c	/^void mg_dns_send_reply(struct mg_connection *nc, struct mg_dns_reply *r) {$/;"	f
mg_dns_tid	mongoose.c	/^static int mg_dns_tid = 0xa0;$/;"	v	file:
mg_dns_uncompress_name	mongoose.c	/^size_t mg_dns_uncompress_name(struct mg_dns_message *msg, struct mg_str *name,$/;"	f
mg_do_connect	mongoose.c	/^MG_INTERNAL struct mg_connection *mg_do_connect(struct mg_connection *nc,$/;"	f
mg_do_recv	mongoose.c	/^static int mg_do_recv(struct mg_connection *nc) {$/;"	f	file:
mg_do_ssi_include	mongoose.c	/^static void mg_do_ssi_include(struct mg_connection *nc, struct http_message *hm,$/;"	f	file:
mg_escape	mongoose.c	/^static void mg_escape(const char *src, char *dst, size_t dst_len) {$/;"	f	file:
mg_ev_handler_empty	mongoose.c	/^void mg_ev_handler_empty(struct mg_connection *c, int ev,$/;"	f
mg_ev_mgr_lwip_data	mongoose.c	/^struct mg_ev_mgr_lwip_data {$/;"	s	file:
mg_ev_mgr_lwip_process_signals	mongoose.c	/^void mg_ev_mgr_lwip_process_signals(struct mg_mgr *mgr) {$/;"	f
mg_ev_mgr_lwip_signal	mongoose.c	/^struct mg_ev_mgr_lwip_signal {$/;"	s	file:
mg_file_upload_handler	mongoose.c	/^void mg_file_upload_handler(struct mg_connection *nc, int ev, void *ev_data,$/;"	f
mg_find_iface	mongoose.c	/^struct mg_iface *mg_find_iface(struct mg_mgr *mgr,$/;"	f
mg_find_index_file	mongoose.c	/^MG_INTERNAL void mg_find_index_file(const char *path, const char *list,$/;"	f
mg_fopen	mongoose.c	/^FILE *mg_fopen(const char *path, const char *mode) {$/;"	f
mg_forward	mongoose.c	/^void mg_forward(struct mg_connection *from, struct mg_connection *to) {$/;"	f
mg_fread	mongoose.c	/^size_t mg_fread(void *ptr, size_t size, size_t count, FILE *f) {$/;"	f
mg_fwrite	mongoose.c	/^size_t mg_fwrite(const void *ptr, size_t size, size_t count, FILE *f) {$/;"	f
mg_get_errno	mongoose.c	/^DO_NOT_WARN_UNUSED MG_INTERNAL int mg_get_errno(void) {$/;"	f
mg_get_http_basic_auth	mongoose.c	/^int mg_get_http_basic_auth(struct http_message *hm, char *user, size_t user_len,$/;"	f
mg_get_http_header	mongoose.c	/^struct mg_str *mg_get_http_header(struct http_message *hm, const char *name) {$/;"	f
mg_get_http_var	mongoose.c	/^int mg_get_http_var(const struct mg_str *buf, const char *name, char *dst,$/;"	f
mg_get_ip_address_of_nameserver	mongoose.c	/^static int mg_get_ip_address_of_nameserver(char *name, size_t name_len) {$/;"	f	file:
mg_get_line_len	mongoose.c	/^static size_t mg_get_line_len(const char *buf, size_t buf_len) {$/;"	f	file:
mg_get_mime_type_encoding	mongoose.c	/^MG_INTERNAL int mg_get_mime_type_encoding($/;"	f
mg_get_mime_types_entry	mongoose.c	/^static struct mg_str mg_get_mime_types_entry(struct mg_str path) {$/;"	f	file:
mg_get_month_index	mongoose.c	/^static int mg_get_month_index(const char *s) {$/;"	f	file:
mg_get_ntp_ts	mongoose.c	/^static void mg_get_ntp_ts(const char *ntp, uint64_t *val) {$/;"	f	file:
mg_get_sec	mongoose.c	/^static uint64_t mg_get_sec(uint64_t val) {$/;"	f	file:
mg_get_usec	mongoose.c	/^static uint64_t mg_get_usec(uint64_t val) {$/;"	f	file:
mg_gmt_time_string	mongoose.c	/^static void mg_gmt_time_string(char *buf, size_t buf_len, time_t *t) {$/;"	f	file:
mg_handle_cgi	mongoose.c	/^MG_INTERNAL void mg_handle_cgi(struct mg_connection *nc, const char *prog,$/;"	f
mg_handle_chunked	mongoose.c	/^MG_INTERNAL size_t mg_handle_chunked(struct mg_connection *nc,$/;"	f
mg_handle_delete	mongoose.c	/^MG_INTERNAL void mg_handle_delete(struct mg_connection *nc,$/;"	f
mg_handle_incoming_websocket_frame	mongoose.c	/^static void mg_handle_incoming_websocket_frame(struct mg_connection *nc,$/;"	f	file:
mg_handle_lock	mongoose.c	/^MG_INTERNAL void mg_handle_lock(struct mg_connection *nc, const char *path) {$/;"	f
mg_handle_mkcol	mongoose.c	/^MG_INTERNAL void mg_handle_mkcol(struct mg_connection *nc, const char *path,$/;"	f
mg_handle_move	mongoose.c	/^MG_INTERNAL void mg_handle_move(struct mg_connection *c,$/;"	f
mg_handle_propfind	mongoose.c	/^MG_INTERNAL void mg_handle_propfind(struct mg_connection *nc, const char *path,$/;"	f
mg_handle_put	mongoose.c	/^MG_INTERNAL void mg_handle_put(struct mg_connection *nc, const char *path,$/;"	f
mg_handle_recv	mongoose.c	/^static void mg_handle_recv(struct mg_connection *nc) {$/;"	f	file:
mg_handle_send	mongoose.c	/^static void mg_handle_send(struct mg_connection *nc) {$/;"	f	file:
mg_handle_ssi_request	mongoose.c	/^MG_INTERNAL void mg_handle_ssi_request(struct mg_connection *nc,$/;"	f
mg_hash_md5_v	mongoose.c	/^void mg_hash_md5_v(size_t num_msgs, const uint8_t *msgs[],$/;"	f
mg_hash_sha1_v	mongoose.c	/^void mg_hash_sha1_v(size_t num_msgs, const uint8_t *msgs[],$/;"	f
mg_hexdump	mongoose.c	/^int mg_hexdump(const void *buf, int len, char *dst, int dst_len) {$/;"	f
mg_hexdump_connection	mongoose.c	/^void mg_hexdump_connection(struct mg_connection *nc, const char *path,$/;"	f
mg_hexdump_n	mongoose.c	/^static int mg_hexdump_n(const void *buf, int len, char *dst, int dst_len,$/;"	f	file:
mg_hexdumpf	mongoose.c	/^void mg_hexdumpf(FILE *fp, const void *buf, int len) {$/;"	f
mg_http_call_endpoint_handler	mongoose.c	/^static void mg_http_call_endpoint_handler(struct mg_connection *nc, int ev,$/;"	f	file:
mg_http_check_digest_auth	mongoose.c	/^int mg_http_check_digest_auth(struct http_message *hm, const char *auth_domain,$/;"	f
mg_http_construct_etag	mongoose.c	/^static void mg_http_construct_etag(char *buf, size_t buf_len,$/;"	f	file:
mg_http_create_digest_auth_header	mongoose.c	/^int mg_http_create_digest_auth_header(char *buf, size_t buf_len,$/;"	f
mg_http_create_proto_data	mongoose.c	/^MG_INTERNAL struct mg_http_proto_data *mg_http_create_proto_data($/;"	f
mg_http_endpoint	mongoose.c	/^struct mg_http_endpoint {$/;"	s	file:
mg_http_free_proto_data_cgi	mongoose.c	/^MG_INTERNAL void mg_http_free_proto_data_cgi(struct mg_http_proto_data_cgi *d) {$/;"	f
mg_http_free_proto_data_endpoints	mongoose.c	/^static void mg_http_free_proto_data_endpoints(struct mg_http_endpoint **ep) {$/;"	f	file:
mg_http_free_proto_data_file	mongoose.c	/^static void mg_http_free_proto_data_file(struct mg_http_proto_data_file *d) {$/;"	f	file:
mg_http_free_proto_data_mp_stream	mongoose.c	/^static void mg_http_free_proto_data_mp_stream($/;"	f	file:
mg_http_free_reverse_proxy_data	mongoose.c	/^static void mg_http_free_reverse_proxy_data(struct mg_reverse_proxy_data *rpd) {$/;"	f	file:
mg_http_get_endpoint_handler	mongoose.c	/^struct mg_http_endpoint *mg_http_get_endpoint_handler(struct mg_connection *nc,$/;"	f
mg_http_get_proto_data	mongoose.c	/^static struct mg_http_proto_data *mg_http_get_proto_data($/;"	f	file:
mg_http_get_request_len	mongoose.c	/^static int mg_http_get_request_len(const char *s, int buf_len) {$/;"	f	file:
mg_http_handle_forwarding	mongoose.c	/^static int mg_http_handle_forwarding(struct mg_connection *nc,$/;"	f	file:
mg_http_handler	mongoose.c	/^void mg_http_handler(struct mg_connection *nc, int ev,$/;"	f
mg_http_handler2	mongoose.c	/^static void mg_http_handler2(struct mg_connection *nc, int ev,$/;"	f	file:
mg_http_is_authorized	mongoose.c	/^int mg_http_is_authorized(struct http_message *hm, const struct mg_str path,$/;"	f
mg_http_is_authorized	mongoose.c	/^int mg_http_is_authorized(struct http_message *hm, struct mg_str path,$/;"	f
mg_http_multipart_begin	mongoose.c	/^static void mg_http_multipart_begin(struct mg_connection *nc,$/;"	f	file:
mg_http_multipart_call_handler	mongoose.c	/^static size_t mg_http_multipart_call_handler(struct mg_connection *c, int ev,$/;"	f	file:
mg_http_multipart_continue	mongoose.c	/^static void mg_http_multipart_continue(struct mg_connection *c) {$/;"	f	file:
mg_http_multipart_continue_wait_for_chunk	mongoose.c	/^static int mg_http_multipart_continue_wait_for_chunk(struct mg_connection *c) {$/;"	f	file:
mg_http_multipart_finalize	mongoose.c	/^static int mg_http_multipart_finalize(struct mg_connection *c) {$/;"	f	file:
mg_http_multipart_process_boundary	mongoose.c	/^static int mg_http_multipart_process_boundary(struct mg_connection *c) {$/;"	f	file:
mg_http_multipart_stream	mongoose.c	/^struct mg_http_multipart_stream {$/;"	s	file:
mg_http_multipart_stream_state	mongoose.c	/^enum mg_http_multipart_stream_state {$/;"	g	file:
mg_http_multipart_wait_for_boundary	mongoose.c	/^static int mg_http_multipart_wait_for_boundary(struct mg_connection *c) {$/;"	f	file:
mg_http_parse_chunk	mongoose.c	/^static size_t mg_http_parse_chunk(char *buf, size_t len, char **chunk_data,$/;"	f	file:
mg_http_parse_header	mongoose.c	/^int mg_http_parse_header(struct mg_str *hdr, const char *var_name, char *buf,$/;"	f
mg_http_parse_header2	mongoose.c	/^int mg_http_parse_header2(struct mg_str *hdr, const char *var_name, char **buf,$/;"	f
mg_http_parse_header_internal	mongoose.c	/^static void mg_http_parse_header_internal(struct mg_str *hdr,$/;"	f	file:
mg_http_parse_headers	mongoose.c	/^static const char *mg_http_parse_headers(const char *s, const char *end,$/;"	f	file:
mg_http_parse_range_header	mongoose.c	/^static int mg_http_parse_range_header(const struct mg_str *header, int64_t *a,$/;"	f	file:
mg_http_proto_data	mongoose.c	/^struct mg_http_proto_data {$/;"	s	file:
mg_http_proto_data_cgi	mongoose.c	/^struct mg_http_proto_data_cgi {$/;"	s	file:
mg_http_proto_data_chuncked	mongoose.c	/^struct mg_http_proto_data_chuncked {$/;"	s	file:
mg_http_proto_data_destructor	mongoose.c	/^static void mg_http_proto_data_destructor(void *proto_data) {$/;"	f	file:
mg_http_proto_data_file	mongoose.c	/^struct mg_http_proto_data_file {$/;"	s	file:
mg_http_proto_data_type	mongoose.c	/^enum mg_http_proto_data_type { DATA_NONE, DATA_FILE, DATA_PUT };$/;"	g	file:
mg_http_reverse_proxy	mongoose.c	/^void mg_http_reverse_proxy(struct mg_connection *nc,$/;"	f
mg_http_send_digest_auth_request	mongoose.c	/^void mg_http_send_digest_auth_request(struct mg_connection *c,$/;"	f
mg_http_send_error	mongoose.c	/^void mg_http_send_error(struct mg_connection *nc, int code,$/;"	f
mg_http_send_options	mongoose.c	/^static void mg_http_send_options(struct mg_connection *nc,$/;"	f	file:
mg_http_send_port_based_redirect	mongoose.c	/^static int mg_http_send_port_based_redirect($/;"	f	file:
mg_http_send_redirect	mongoose.c	/^void mg_http_send_redirect(struct mg_connection *nc, int status_code,$/;"	f
mg_http_serve_file	mongoose.c	/^void mg_http_serve_file(struct mg_connection *nc, struct http_message *hm,$/;"	f
mg_http_serve_file2	mongoose.c	/^static void mg_http_serve_file2(struct mg_connection *nc, const char *path,$/;"	f	file:
mg_http_serve_file_internal	mongoose.c	/^void mg_http_serve_file_internal(struct mg_connection *nc,$/;"	f
mg_http_transfer_file_data	mongoose.c	/^static void mg_http_transfer_file_data(struct mg_connection *nc) {$/;"	f	file:
mg_if_accept_new_conn	mongoose.c	/^struct mg_connection *mg_if_accept_new_conn(struct mg_connection *lc) {$/;"	f
mg_if_accept_tcp_cb	mongoose.c	/^void mg_if_accept_tcp_cb(struct mg_connection *nc, union socket_address *sa,$/;"	f
mg_if_can_recv_cb	mongoose.c	/^void mg_if_can_recv_cb(struct mg_connection *nc) {$/;"	f
mg_if_can_send_cb	mongoose.c	/^void mg_if_can_send_cb(struct mg_connection *nc) {$/;"	f
mg_if_connect_cb	mongoose.c	/^void mg_if_connect_cb(struct mg_connection *nc, int err) {$/;"	f
mg_if_create_iface	mongoose.c	/^struct mg_iface *mg_if_create_iface(const struct mg_iface_vtable *vtable,$/;"	f
mg_if_get_conn_addr	mongoose.c	/^void mg_if_get_conn_addr(struct mg_connection *nc, int remote,$/;"	f
mg_if_poll	mongoose.c	/^int mg_if_poll(struct mg_connection *nc, double now) {$/;"	f
mg_ifaces	mongoose.c	/^const struct mg_iface_vtable *mg_ifaces[] = {$/;"	v	typeref:struct:mg_iface_vtable
mg_is_big_endian	mongoose.c	/^int mg_is_big_endian(void) {$/;"	f
mg_is_creation_request	mongoose.c	/^static int mg_is_creation_request(const struct http_message *hm) {$/;"	f	file:
mg_is_dav_request	mongoose.c	/^MG_INTERNAL int mg_is_dav_request(const struct mg_str *s) {$/;"	f
mg_is_error	mongoose.c	/^static int mg_is_error(int n) {$/;"	f	file:
mg_is_error	mongoose.c	/^static int mg_is_error(void) {$/;"	f	file:
mg_is_file_hidden	mongoose.c	/^static int mg_is_file_hidden(const char *path,$/;"	f	file:
mg_is_not_modified	mongoose.c	/^MG_INTERNAL int mg_is_not_modified(struct http_message *hm, cs_stat_t *st) {$/;"	f
mg_is_ws_control_frame	mongoose.c	/^static int mg_is_ws_control_frame(unsigned char flags) {$/;"	f	file:
mg_is_ws_first_fragment	mongoose.c	/^static int mg_is_ws_first_fragment(unsigned char flags) {$/;"	f	file:
mg_is_ws_fragment	mongoose.c	/^static int mg_is_ws_fragment(unsigned char flags) {$/;"	f	file:
mg_lwip_accept_cb	mongoose.c	/^static err_t mg_lwip_accept_cb(void *arg, struct tcp_pcb *newtpcb, err_t err) {$/;"	f	file:
mg_lwip_conn_state	mongoose.c	/^struct mg_lwip_conn_state {$/;"	s	file:
mg_lwip_handle_accept	mongoose.c	/^void mg_lwip_handle_accept(struct mg_connection *nc) {$/;"	f
mg_lwip_if_add_conn	mongoose.c	/^void mg_lwip_if_add_conn(struct mg_connection *nc) {$/;"	f
mg_lwip_if_can_send	mongoose.c	/^static int mg_lwip_if_can_send(struct mg_connection *nc,$/;"	f	file:
mg_lwip_if_connect_tcp	mongoose.c	/^void mg_lwip_if_connect_tcp(struct mg_connection *nc,$/;"	f
mg_lwip_if_connect_tcp_ctx	mongoose.c	/^struct mg_lwip_if_connect_tcp_ctx {$/;"	s	file:
mg_lwip_if_connect_tcp_tcpip	mongoose.c	/^static void mg_lwip_if_connect_tcp_tcpip(void *arg) {$/;"	f	file:
mg_lwip_if_connect_udp	mongoose.c	/^void mg_lwip_if_connect_udp(struct mg_connection *nc) {$/;"	f
mg_lwip_if_connect_udp_tcpip	mongoose.c	/^static void mg_lwip_if_connect_udp_tcpip(void *arg) {$/;"	f	file:
mg_lwip_if_create_conn	mongoose.c	/^int mg_lwip_if_create_conn(struct mg_connection *nc) {$/;"	f
mg_lwip_if_destroy_conn	mongoose.c	/^void mg_lwip_if_destroy_conn(struct mg_connection *nc) {$/;"	f
mg_lwip_if_free	mongoose.c	/^void mg_lwip_if_free(struct mg_iface *iface) {$/;"	f
mg_lwip_if_get_conn_addr	mongoose.c	/^void mg_lwip_if_get_conn_addr(struct mg_connection *nc, int remote,$/;"	f
mg_lwip_if_init	mongoose.c	/^void mg_lwip_if_init(struct mg_iface *iface) {$/;"	f
mg_lwip_if_listen_ctx	mongoose.c	/^struct mg_lwip_if_listen_ctx {$/;"	s	file:
mg_lwip_if_listen_tcp	mongoose.c	/^int mg_lwip_if_listen_tcp(struct mg_connection *nc, union socket_address *sa) {$/;"	f
mg_lwip_if_listen_tcp_tcpip	mongoose.c	/^static void mg_lwip_if_listen_tcp_tcpip(void *arg) {$/;"	f	file:
mg_lwip_if_listen_udp	mongoose.c	/^int mg_lwip_if_listen_udp(struct mg_connection *nc, union socket_address *sa) {$/;"	f
mg_lwip_if_listen_udp_tcpip	mongoose.c	/^static void mg_lwip_if_listen_udp_tcpip(void *arg) {$/;"	f	file:
mg_lwip_if_poll	mongoose.c	/^time_t mg_lwip_if_poll(struct mg_iface *iface, int timeout_ms) {$/;"	f
mg_lwip_if_remove_conn	mongoose.c	/^void mg_lwip_if_remove_conn(struct mg_connection *nc) {$/;"	f
mg_lwip_if_sock_set	mongoose.c	/^void mg_lwip_if_sock_set(struct mg_connection *nc, sock_t sock) {$/;"	f
mg_lwip_if_tcp_recv	mongoose.c	/^static int mg_lwip_if_tcp_recv(struct mg_connection *nc, void *buf,$/;"	f	file:
mg_lwip_if_tcp_send	mongoose.c	/^int mg_lwip_if_tcp_send(struct mg_connection *nc, const void *buf, size_t len) {$/;"	f
mg_lwip_if_udp_recv	mongoose.c	/^static int mg_lwip_if_udp_recv(struct mg_connection *nc, void *buf, size_t len,$/;"	f	file:
mg_lwip_if_udp_send	mongoose.c	/^static int mg_lwip_if_udp_send(struct mg_connection *nc, const void *data,$/;"	f	file:
mg_lwip_iface_vtable	mongoose.c	/^const struct mg_iface_vtable mg_lwip_iface_vtable = MG_LWIP_IFACE_VTABLE;$/;"	v	typeref:struct:mg_iface_vtable
mg_lwip_netif_run_on_tcpip	mongoose.c	/^void mg_lwip_netif_run_on_tcpip(void (*fn)(void *), void *arg) {$/;"	f
mg_lwip_netif_run_on_tcpip	mongoose.c	14959;"	d	file:
mg_lwip_netif_tcpip_call_ctx	mongoose.c	/^struct mg_lwip_netif_tcpip_call_ctx {$/;"	s	file:
mg_lwip_post_signal	mongoose.c	/^void mg_lwip_post_signal(enum mg_sig_type sig, struct mg_connection *nc) {$/;"	f
mg_lwip_recv_common	mongoose.c	/^static void mg_lwip_recv_common(struct mg_connection *nc, struct pbuf *p) {$/;"	f	file:
mg_lwip_set_keepalive_params	mongoose.c	/^void mg_lwip_set_keepalive_params(struct mg_connection *nc, int idle,$/;"	f
mg_lwip_tcp_conn_cb	mongoose.c	/^static err_t mg_lwip_tcp_conn_cb(void *arg, struct tcp_pcb *tpcb, err_t err) {$/;"	f	file:
mg_lwip_tcp_error_cb	mongoose.c	/^static void mg_lwip_tcp_error_cb(void *arg, err_t err) {$/;"	f	file:
mg_lwip_tcp_recv_cb	mongoose.c	/^static err_t mg_lwip_tcp_recv_cb(void *arg, struct tcp_pcb *tpcb,$/;"	f	file:
mg_lwip_tcp_sent_cb	mongoose.c	/^static err_t mg_lwip_tcp_sent_cb(void *arg, struct tcp_pcb *tpcb,$/;"	f	file:
mg_lwip_tcp_write_ctx	mongoose.c	/^struct mg_lwip_tcp_write_ctx {$/;"	s	file:
mg_lwip_tcp_write_tcpip	mongoose.c	/^static void mg_lwip_tcp_write_tcpip(void *arg) {$/;"	f	file:
mg_lwip_udp_recv_cb	mongoose.c	/^static void mg_lwip_udp_recv_cb(void *arg, struct udp_pcb *pcb, struct pbuf *p,$/;"	f	file:
mg_match_prefix	mongoose.c	/^size_t mg_match_prefix(const char *pattern, int pattern_len, const char *str) {$/;"	f
mg_match_prefix_n	mongoose.c	/^size_t mg_match_prefix_n(const struct mg_str pattern, const struct mg_str str) {$/;"	f
mg_mbuf_append_base64	mongoose.c	/^void mg_mbuf_append_base64(struct mbuf *mbuf, const void *data, size_t len) {$/;"	f
mg_mbuf_append_base64_putc	mongoose.c	/^void mg_mbuf_append_base64_putc(char ch, void *user_data) {$/;"	f
mg_mgr_free	mongoose.c	/^void mg_mgr_free(struct mg_mgr *m) {$/;"	f
mg_mgr_handle_conn	mongoose.c	/^void mg_mgr_handle_conn(struct mg_connection *nc, int fd_flags, double now) {$/;"	f
mg_mgr_handle_ctl_sock	mongoose.c	/^static void mg_mgr_handle_ctl_sock(struct mg_mgr *mgr) {$/;"	f	file:
mg_mgr_init	mongoose.c	/^void mg_mgr_init(struct mg_mgr *m, void *user_data) {$/;"	f
mg_mgr_init_opt	mongoose.c	/^void mg_mgr_init_opt(struct mg_mgr *m, void *user_data,$/;"	f
mg_mgr_min_timer	mongoose.c	/^double mg_mgr_min_timer(const struct mg_mgr *mgr) {$/;"	f
mg_mgr_poll	mongoose.c	/^int mg_mgr_poll(struct mg_mgr *m, int timeout_ms) {$/;"	f
mg_mk_str	mongoose.c	/^struct mg_str mg_mk_str(const char *s) {$/;"	f
mg_mk_str_n	mongoose.c	/^struct mg_str mg_mk_str_n(const char *s, size_t len) {$/;"	f
mg_mkdir	mongoose.c	/^static int mg_mkdir(const char *path, uint32_t mode) {$/;"	f	file:
mg_mkmd5resp	mongoose.c	/^static void mg_mkmd5resp(const char *method, size_t method_len, const char *uri,$/;"	f	file:
mg_mqtt_add_session	mongoose.c	/^static void mg_mqtt_add_session(struct mg_mqtt_session *s) {$/;"	f	file:
mg_mqtt_broker	mongoose.c	/^void mg_mqtt_broker(struct mg_connection *nc, int ev, void *data) {$/;"	f
mg_mqtt_broker_handle_connect	mongoose.c	/^static void mg_mqtt_broker_handle_connect(struct mg_mqtt_broker *brk,$/;"	f	file:
mg_mqtt_broker_handle_publish	mongoose.c	/^static void mg_mqtt_broker_handle_publish(struct mg_mqtt_broker *brk,$/;"	f	file:
mg_mqtt_broker_handle_subscribe	mongoose.c	/^static void mg_mqtt_broker_handle_subscribe(struct mg_connection *nc,$/;"	f	file:
mg_mqtt_broker_init	mongoose.c	/^void mg_mqtt_broker_init(struct mg_mqtt_broker *brk, void *user_data) {$/;"	f
mg_mqtt_close_session	mongoose.c	/^static void mg_mqtt_close_session(struct mg_mqtt_session *s) {$/;"	f	file:
mg_mqtt_connack	mongoose.c	/^void mg_mqtt_connack(struct mg_connection *nc, uint8_t return_code) {$/;"	f
mg_mqtt_destroy_session	mongoose.c	/^static void mg_mqtt_destroy_session(struct mg_mqtt_session *s) {$/;"	f	file:
mg_mqtt_disconnect	mongoose.c	/^void mg_mqtt_disconnect(struct mg_connection *nc) {$/;"	f
mg_mqtt_match_topic_expression	mongoose.c	/^int mg_mqtt_match_topic_expression(struct mg_str exp, struct mg_str topic) {$/;"	f
mg_mqtt_next	mongoose.c	/^struct mg_mqtt_session *mg_mqtt_next(struct mg_mqtt_broker *brk,$/;"	f
mg_mqtt_next_subscribe_topic	mongoose.c	/^int mg_mqtt_next_subscribe_topic(struct mg_mqtt_message *msg,$/;"	f
mg_mqtt_next_topic_component	mongoose.c	/^static struct mg_str mg_mqtt_next_topic_component(struct mg_str *topic) {$/;"	f	file:
mg_mqtt_ping	mongoose.c	/^void mg_mqtt_ping(struct mg_connection *nc) {$/;"	f
mg_mqtt_pong	mongoose.c	/^void mg_mqtt_pong(struct mg_connection *nc) {$/;"	f
mg_mqtt_proto_data_destructor	mongoose.c	/^static void mg_mqtt_proto_data_destructor(void *proto_data) {$/;"	f	file:
mg_mqtt_puback	mongoose.c	/^void mg_mqtt_puback(struct mg_connection *nc, uint16_t message_id) {$/;"	f
mg_mqtt_pubcomp	mongoose.c	/^void mg_mqtt_pubcomp(struct mg_connection *nc, uint16_t message_id) {$/;"	f
mg_mqtt_publish	mongoose.c	/^void mg_mqtt_publish(struct mg_connection *nc, const char *topic,$/;"	f
mg_mqtt_pubrec	mongoose.c	/^void mg_mqtt_pubrec(struct mg_connection *nc, uint16_t message_id) {$/;"	f
mg_mqtt_pubrel	mongoose.c	/^void mg_mqtt_pubrel(struct mg_connection *nc, uint16_t message_id) {$/;"	f
mg_mqtt_remove_session	mongoose.c	/^static void mg_mqtt_remove_session(struct mg_mqtt_session *s) {$/;"	f	file:
mg_mqtt_session_init	mongoose.c	/^static void mg_mqtt_session_init(struct mg_mqtt_broker *brk,$/;"	f	file:
mg_mqtt_suback	mongoose.c	/^void mg_mqtt_suback(struct mg_connection *nc, uint8_t *qoss, size_t qoss_len,$/;"	f
mg_mqtt_subscribe	mongoose.c	/^void mg_mqtt_subscribe(struct mg_connection *nc,$/;"	f
mg_mqtt_unsuback	mongoose.c	/^void mg_mqtt_unsuback(struct mg_connection *nc, uint16_t message_id) {$/;"	f
mg_mqtt_unsubscribe	mongoose.c	/^void mg_mqtt_unsubscribe(struct mg_connection *nc, char **topics,$/;"	f
mg_mqtt_vmatch_topic_expression	mongoose.c	/^int mg_mqtt_vmatch_topic_expression(const char *exp, struct mg_str topic) {$/;"	f
mg_ncasecmp	mongoose.c	/^int mg_ncasecmp(const char *s1, const char *s2, size_t len) {$/;"	f
mg_next	mongoose.c	/^struct mg_connection *mg_next(struct mg_mgr *s, struct mg_connection *conn) {$/;"	f
mg_next_comma_list_entry	mongoose.c	/^const char *mg_next_comma_list_entry(const char *list, struct mg_str *val,$/;"	f
mg_next_comma_list_entry_n	mongoose.c	/^struct mg_str mg_next_comma_list_entry_n(struct mg_str list, struct mg_str *val,$/;"	f
mg_normalize_uri_path	mongoose.c	/^int mg_normalize_uri_path(const struct mg_str *in, struct mg_str *out) {$/;"	f
mg_ntp_to_tv	mongoose.c	/^static void mg_ntp_to_tv(uint64_t val, struct timeval *tv) {$/;"	f	file:
mg_null_if_add_conn	mongoose.c	/^static void mg_null_if_add_conn(struct mg_connection *c) {$/;"	f	file:
mg_null_if_connect_tcp	mongoose.c	/^static void mg_null_if_connect_tcp(struct mg_connection *c,$/;"	f	file:
mg_null_if_connect_udp	mongoose.c	/^static void mg_null_if_connect_udp(struct mg_connection *c) {$/;"	f	file:
mg_null_if_create_conn	mongoose.c	/^static int mg_null_if_create_conn(struct mg_connection *c) {$/;"	f	file:
mg_null_if_destroy_conn	mongoose.c	/^static void mg_null_if_destroy_conn(struct mg_connection *c) {$/;"	f	file:
mg_null_if_free	mongoose.c	/^static void mg_null_if_free(struct mg_iface *iface) {$/;"	f	file:
mg_null_if_get_conn_addr	mongoose.c	/^static void mg_null_if_get_conn_addr(struct mg_connection *c, int remote,$/;"	f	file:
mg_null_if_init	mongoose.c	/^static void mg_null_if_init(struct mg_iface *iface) {$/;"	f	file:
mg_null_if_listen_tcp	mongoose.c	/^static int mg_null_if_listen_tcp(struct mg_connection *c,$/;"	f	file:
mg_null_if_listen_udp	mongoose.c	/^static int mg_null_if_listen_udp(struct mg_connection *c,$/;"	f	file:
mg_null_if_poll	mongoose.c	/^static time_t mg_null_if_poll(struct mg_iface *iface, int timeout_ms) {$/;"	f	file:
mg_null_if_remove_conn	mongoose.c	/^static void mg_null_if_remove_conn(struct mg_connection *c) {$/;"	f	file:
mg_null_if_sock_set	mongoose.c	/^static void mg_null_if_sock_set(struct mg_connection *c, sock_t sock) {$/;"	f	file:
mg_null_if_tcp_recv	mongoose.c	/^int mg_null_if_tcp_recv(struct mg_connection *c, void *buf, size_t len) {$/;"	f
mg_null_if_tcp_send	mongoose.c	/^static int mg_null_if_tcp_send(struct mg_connection *c, const void *buf,$/;"	f	file:
mg_null_if_udp_recv	mongoose.c	/^int mg_null_if_udp_recv(struct mg_connection *c, void *buf, size_t len,$/;"	f
mg_null_if_udp_send	mongoose.c	/^static int mg_null_if_udp_send(struct mg_connection *c, const void *buf,$/;"	f	file:
mg_null_iface_vtable	mongoose.c	/^const struct mg_iface_vtable mg_null_iface_vtable = MG_NULL_IFACE_VTABLE;$/;"	v	typeref:struct:mg_iface_vtable
mg_num_ifaces	mongoose.c	/^int mg_num_ifaces = (int) (sizeof(mg_ifaces) \/ sizeof(mg_ifaces[0]));$/;"	v
mg_num_leap_years	mongoose.c	/^static int mg_num_leap_years(int year) {$/;"	f	file:
mg_open	mongoose.c	/^int mg_open(const char *path, int flag, int mode) { \/* LCOV_EXCL_LINE *\/$/;"	f
mg_open_listening_socket	mongoose.c	/^static sock_t mg_open_listening_socket(struct mg_connection *nc,$/;"	f	file:
mg_open_listening_socket	mongoose.c	/^static sock_t mg_open_listening_socket(union socket_address *sa, int type,$/;"	f	file:
mg_parse_address	mongoose.c	/^MG_INTERNAL int mg_parse_address(const char *str, union socket_address *sa,$/;"	f
mg_parse_date_string	mongoose.c	/^MG_INTERNAL time_t mg_parse_date_string(const char *datetime) {$/;"	f
mg_parse_dns	mongoose.c	/^int mg_parse_dns(const char *buf, int len, struct mg_dns_message *msg) {$/;"	f
mg_parse_dns_resource_record	mongoose.c	/^static unsigned char *mg_parse_dns_resource_record($/;"	f	file:
mg_parse_http	mongoose.c	/^int mg_parse_http(const char *s, int n, struct http_message *hm, int is_req) {$/;"	f
mg_parse_http_basic_auth	mongoose.c	/^int mg_parse_http_basic_auth(struct mg_str *hdr, char *user, size_t user_len,$/;"	f
mg_parse_multipart	mongoose.c	/^size_t mg_parse_multipart(const char *buf, size_t buf_len, char *var_name,$/;"	f
mg_parse_uri	mongoose.c	/^int mg_parse_uri(const struct mg_str uri, struct mg_str *scheme,$/;"	f
mg_pic32_if_add_conn	mongoose.c	/^void mg_pic32_if_add_conn(struct mg_connection *nc) {$/;"	f
mg_pic32_if_connect_tcp	mongoose.c	/^void mg_pic32_if_connect_tcp(struct mg_connection *nc,$/;"	f
mg_pic32_if_connect_udp	mongoose.c	/^void mg_pic32_if_connect_udp(struct mg_connection *nc) {$/;"	f
mg_pic32_if_create_conn	mongoose.c	/^int mg_pic32_if_create_conn(struct mg_connection *nc) {$/;"	f
mg_pic32_if_destroy_conn	mongoose.c	/^void mg_pic32_if_destroy_conn(struct mg_connection *nc) {$/;"	f
mg_pic32_if_free	mongoose.c	/^void mg_pic32_if_free(struct mg_iface *iface) {$/;"	f
mg_pic32_if_get_conn_addr	mongoose.c	/^void mg_pic32_if_get_conn_addr(struct mg_connection *nc, int remote,$/;"	f
mg_pic32_if_init	mongoose.c	/^void mg_pic32_if_init(struct mg_iface *iface) {$/;"	f
mg_pic32_if_listen_tcp	mongoose.c	/^int mg_pic32_if_listen_tcp(struct mg_connection *nc, union socket_address *sa) {$/;"	f
mg_pic32_if_listen_udp	mongoose.c	/^int mg_pic32_if_listen_udp(struct mg_connection *nc, union socket_address *sa) {$/;"	f
mg_pic32_if_poll	mongoose.c	/^time_t mg_pic32_if_poll(struct mg_iface *iface, int timeout_ms) {$/;"	f
mg_pic32_if_recved	mongoose.c	/^void mg_pic32_if_recved(struct mg_connection *nc, size_t len) {$/;"	f
mg_pic32_if_remove_conn	mongoose.c	/^void mg_pic32_if_remove_conn(struct mg_connection *nc) {$/;"	f
mg_pic32_if_sock_set	mongoose.c	/^void mg_pic32_if_sock_set(struct mg_connection *nc, sock_t sock) {$/;"	f
mg_pic32_if_tcp_send	mongoose.c	/^void mg_pic32_if_tcp_send(struct mg_connection *nc, const void *buf,$/;"	f
mg_pic32_if_udp_send	mongoose.c	/^void mg_pic32_if_udp_send(struct mg_connection *nc, const void *buf,$/;"	f
mg_pic32_iface_vtable	mongoose.c	/^const struct mg_iface_vtable mg_pic32_iface_vtable = MG_PIC32_IFACE_VTABLE;$/;"	v	typeref:struct:mg_iface_vtable
mg_prepare_cgi_environment	mongoose.c	/^static void mg_prepare_cgi_environment(struct mg_connection *nc,$/;"	f	file:
mg_print_dir_entry	mongoose.c	/^static void mg_print_dir_entry(struct mg_connection *nc, const char *file_name,$/;"	f	file:
mg_print_props	mongoose.c	/^static void mg_print_props(struct mg_connection *nc, const char *name,$/;"	f	file:
mg_printf	mongoose.c	/^int mg_printf(struct mg_connection *conn, const char *fmt, ...) {$/;"	f
mg_printf_html_escape	mongoose.c	/^void mg_printf_html_escape(struct mg_connection *nc, const char *fmt, ...) {$/;"	f
mg_printf_http_chunk	mongoose.c	/^void mg_printf_http_chunk(struct mg_connection *nc, const char *fmt, ...) {$/;"	f
mg_printf_websocket_frame	mongoose.c	/^void mg_printf_websocket_frame(struct mg_connection *nc, int op,$/;"	f
mg_pull_from_stdout	mongoose.c	/^static void *mg_pull_from_stdout(void *arg) {$/;"	f	file:
mg_push_to_stdin	mongoose.c	/^static void *mg_push_to_stdin(void *arg) {$/;"	f	file:
mg_q_msg	mongoose.c	/^struct mg_q_msg {$/;"	s	file:
mg_q_msg_type	mongoose.c	/^enum mg_q_msg_type {$/;"	g	file:
mg_recv_tcp	mongoose.c	/^static int mg_recv_tcp(struct mg_connection *nc, char *buf, size_t len) {$/;"	f	file:
mg_recv_udp	mongoose.c	/^static int mg_recv_udp(struct mg_connection *nc, char *buf, size_t len) {$/;"	f	file:
mg_register_http_endpoint	mongoose.c	/^void mg_register_http_endpoint(struct mg_connection *nc, const char *uri_path,$/;"	f
mg_register_http_endpoint_opt	mongoose.c	/^void mg_register_http_endpoint_opt(struct mg_connection *nc,$/;"	f
mg_remove_conn	mongoose.c	/^MG_INTERNAL void mg_remove_conn(struct mg_connection *conn) {$/;"	f
mg_remove_directory	mongoose.c	/^static int mg_remove_directory(const struct mg_serve_http_opts *opts,$/;"	f	file:
mg_resolve	mongoose.c	/^int mg_resolve(const char *host, char *buf, size_t n) {$/;"	f
mg_resolve2	mongoose.c	/^static int mg_resolve2(const char *host, struct in_addr *ina) {$/;"	f	file:
mg_resolve_async	mongoose.c	/^int mg_resolve_async(struct mg_mgr *mgr, const char *name, int query,$/;"	f
mg_resolve_async_eh	mongoose.c	/^static void mg_resolve_async_eh(struct mg_connection *nc, int ev,$/;"	f	file:
mg_resolve_async_opt	mongoose.c	/^int mg_resolve_async_opt(struct mg_mgr *mgr, const char *name, int query,$/;"	f
mg_resolve_async_request	mongoose.c	/^struct mg_resolve_async_request {$/;"	s	file:
mg_resolve_from_hosts_file	mongoose.c	/^int mg_resolve_from_hosts_file(const char *name, union socket_address *usa) {$/;"	f
mg_reverse_proxy_data	mongoose.c	/^struct mg_reverse_proxy_data {$/;"	s	file:
mg_reverse_proxy_handler	mongoose.c	/^static void mg_reverse_proxy_handler(struct mg_connection *nc, int ev,$/;"	f	file:
mg_run_in_task	mongoose.c	/^void mg_run_in_task(void (*cb)(struct mg_mgr *mgr, void *arg), void *cb_arg) {$/;"	f
mg_s_cipher_list	mongoose.c	/^static const char mg_s_cipher_list[] =$/;"	v	file:
mg_s_cipher_list	mongoose.c	/^static const int mg_s_cipher_list[] = {$/;"	v	file:
mg_s_default_dh_params	mongoose.c	/^static const char mg_s_default_dh_params[] =$/;"	v	file:
mg_scan_directory	mongoose.c	/^static void mg_scan_directory(struct mg_connection *nc, const char *dir,$/;"	f	file:
mg_send	mongoose.c	/^void mg_send(struct mg_connection *nc, const void *buf, int len) {$/;"	f
mg_send_directory_listing	mongoose.c	/^static void mg_send_directory_listing(struct mg_connection *nc, const char *dir,$/;"	f	file:
mg_send_dns_query	mongoose.c	/^void mg_send_dns_query(struct mg_connection *nc, const char *name,$/;"	f
mg_send_file_data	mongoose.c	/^static void mg_send_file_data(struct mg_connection *nc, FILE *fp) {$/;"	f	file:
mg_send_head	mongoose.c	/^void mg_send_head(struct mg_connection *c, int status_code,$/;"	f
mg_send_http_chunk	mongoose.c	/^void mg_send_http_chunk(struct mg_connection *nc, const char *buf, size_t len) {$/;"	f
mg_send_http_file	mongoose.c	/^MG_INTERNAL void mg_send_http_file(struct mg_connection *nc, char *path,$/;"	f
mg_send_mqtt_handshake	mongoose.c	/^void mg_send_mqtt_handshake(struct mg_connection *nc, const char *client_id) {$/;"	f
mg_send_mqtt_handshake_opt	mongoose.c	/^void mg_send_mqtt_handshake_opt(struct mg_connection *nc, const char *client_id,$/;"	f
mg_send_mqtt_header	mongoose.c	/^static void mg_send_mqtt_header(struct mg_connection *nc, uint8_t cmd,$/;"	f	file:
mg_send_mqtt_short_command	mongoose.c	/^static void mg_send_mqtt_short_command(struct mg_connection *nc, uint8_t cmd,$/;"	f	file:
mg_send_response_line	mongoose.c	/^void mg_send_response_line(struct mg_connection *nc, int status_code,$/;"	f
mg_send_response_line_s	mongoose.c	/^void mg_send_response_line_s(struct mg_connection *nc, int status_code,$/;"	f
mg_send_ssi_file	mongoose.c	/^static void mg_send_ssi_file(struct mg_connection *nc, struct http_message *hm,$/;"	f	file:
mg_send_websocket_frame	mongoose.c	/^void mg_send_websocket_frame(struct mg_connection *nc, int op, const void *data,$/;"	f
mg_send_websocket_framev	mongoose.c	/^void mg_send_websocket_framev(struct mg_connection *nc, int op,$/;"	f
mg_send_websocket_handshake	mongoose.c	/^void mg_send_websocket_handshake(struct mg_connection *nc, const char *path,$/;"	f
mg_send_websocket_handshake2	mongoose.c	/^void mg_send_websocket_handshake2(struct mg_connection *nc, const char *path,$/;"	f
mg_send_websocket_handshake3	mongoose.c	/^void mg_send_websocket_handshake3(struct mg_connection *nc, const char *path,$/;"	f
mg_send_websocket_handshake3v	mongoose.c	/^void mg_send_websocket_handshake3v(struct mg_connection *nc,$/;"	f
mg_send_ws_header	mongoose.c	/^static void mg_send_ws_header(struct mg_connection *nc, int op, size_t len,$/;"	f	file:
mg_serve_http	mongoose.c	/^void mg_serve_http(struct mg_connection *nc, struct http_message *hm,$/;"	f
mg_server_error	websocket_server.c	/^static void mg_server_error(struct mg_connection *nc)$/;"	f	file:
mg_server_replay	websocket_server.c	/^static void mg_server_replay(struct mg_connection *nc, const struct mg_str msg)$/;"	f	file:
mg_set_cipher_list	mongoose.c	/^static enum mg_ssl_if_result mg_set_cipher_list(SSL_CTX *ctx, const char *cl) {$/;"	f	file:
mg_set_cipher_list	mongoose.c	/^static enum mg_ssl_if_result mg_set_cipher_list(struct mg_ssl_if_ctx *ctx,$/;"	f	file:
mg_set_close_on_exec	mongoose.c	/^void mg_set_close_on_exec(sock_t sock) {$/;"	f
mg_set_nameserver	mongoose.c	/^void mg_set_nameserver(struct mg_mgr *mgr, const char *nameserver) {$/;"	f
mg_set_non_blocking_mode	mongoose.c	/^static void mg_set_non_blocking_mode(sock_t sock) {$/;"	f	file:
mg_set_non_blocking_mode	mongoose.c	/^void mg_set_non_blocking_mode(sock_t sock) {$/;"	f
mg_set_protocol_coap	mongoose.c	/^int mg_set_protocol_coap(struct mg_connection *nc) {$/;"	f
mg_set_protocol_dns	mongoose.c	/^void mg_set_protocol_dns(struct mg_connection *nc) {$/;"	f
mg_set_protocol_http_websocket	mongoose.c	/^void mg_set_protocol_http_websocket(struct mg_connection *nc) {$/;"	f
mg_set_protocol_mqtt	mongoose.c	/^void mg_set_protocol_mqtt(struct mg_connection *nc) {$/;"	f
mg_set_protocol_sntp	mongoose.c	/^int mg_set_protocol_sntp(struct mg_connection *c) {$/;"	f
mg_set_protocol_socks	mongoose.c	/^void mg_set_protocol_socks(struct mg_connection *c) {$/;"	f
mg_set_ssl	mongoose.c	/^const char *mg_set_ssl(struct mg_connection *nc, const char *cert,$/;"	f
mg_set_timer	mongoose.c	/^double mg_set_timer(struct mg_connection *c, double timestamp) {$/;"	f
mg_sig_type	mongoose.c	/^enum mg_sig_type {$/;"	g	file:
mg_simplelink_iface_vtable	mongoose.c	/^const struct mg_iface_vtable mg_simplelink_iface_vtable = MG_SL_IFACE_VTABLE;$/;"	v	typeref:struct:mg_iface_vtable
mg_skip	mongoose.c	/^const char *mg_skip(const char *s, const char *end, const char *delims,$/;"	f
mg_sl_if_add_conn	mongoose.c	/^void mg_sl_if_add_conn(struct mg_connection *nc) {$/;"	f
mg_sl_if_connect_tcp	mongoose.c	/^static void mg_sl_if_connect_tcp(struct mg_connection *nc,$/;"	f	file:
mg_sl_if_connect_udp	mongoose.c	/^static void mg_sl_if_connect_udp(struct mg_connection *nc) {$/;"	f	file:
mg_sl_if_create_conn	mongoose.c	/^static int mg_sl_if_create_conn(struct mg_connection *nc) {$/;"	f	file:
mg_sl_if_destroy_conn	mongoose.c	/^void mg_sl_if_destroy_conn(struct mg_connection *nc) {$/;"	f
mg_sl_if_free	mongoose.c	/^void mg_sl_if_free(struct mg_iface *iface) {$/;"	f
mg_sl_if_get_conn_addr	mongoose.c	/^void mg_sl_if_get_conn_addr(struct mg_connection *nc, int remote,$/;"	f
mg_sl_if_init	mongoose.c	/^void mg_sl_if_init(struct mg_iface *iface) {$/;"	f
mg_sl_if_listen_tcp	mongoose.c	/^static int mg_sl_if_listen_tcp(struct mg_connection *nc,$/;"	f	file:
mg_sl_if_listen_udp	mongoose.c	/^static int mg_sl_if_listen_udp(struct mg_connection *nc,$/;"	f	file:
mg_sl_if_poll	mongoose.c	/^time_t mg_sl_if_poll(struct mg_iface *iface, int timeout_ms) {$/;"	f
mg_sl_if_remove_conn	mongoose.c	/^void mg_sl_if_remove_conn(struct mg_connection *nc) {$/;"	f
mg_sl_if_sock_set	mongoose.c	/^void mg_sl_if_sock_set(struct mg_connection *nc, sock_t sock) {$/;"	f
mg_sl_if_tcp_recv	mongoose.c	/^static int mg_sl_if_tcp_recv(struct mg_connection *nc, void *buf, size_t len) {$/;"	f	file:
mg_sl_if_tcp_send	mongoose.c	/^static int mg_sl_if_tcp_send(struct mg_connection *nc, const void *buf,$/;"	f	file:
mg_sl_if_udp_recv	mongoose.c	/^static int mg_sl_if_udp_recv(struct mg_connection *nc, void *buf, size_t len,$/;"	f	file:
mg_sl_if_udp_send	mongoose.c	/^static int mg_sl_if_udp_send(struct mg_connection *nc, const void *buf,$/;"	f	file:
mg_sntp_connect	mongoose.c	/^struct mg_connection *mg_sntp_connect(struct mg_mgr *mgr,$/;"	f
mg_sntp_get_time	mongoose.c	/^struct mg_connection *mg_sntp_get_time(struct mg_mgr *mgr,$/;"	f
mg_sntp_handler	mongoose.c	/^static void mg_sntp_handler(struct mg_connection *c, int ev,$/;"	f	file:
mg_sntp_parse_reply	mongoose.c	/^MG_INTERNAL int mg_sntp_parse_reply(const char *buf, int len,$/;"	f
mg_sntp_send_request	mongoose.c	/^void mg_sntp_send_request(struct mg_connection *c) {$/;"	f
mg_sntp_util_ev_handler	mongoose.c	/^static void mg_sntp_util_ev_handler(struct mg_connection *c, int ev,$/;"	f	file:
mg_sock_addr_to_str	mongoose.c	/^int mg_sock_addr_to_str(const union socket_address *sa, char *buf, size_t len,$/;"	f
mg_sock_get_addr	mongoose.c	/^static void mg_sock_get_addr(sock_t sock, int remote,$/;"	f	file:
mg_sock_set	mongoose.c	/^void mg_sock_set(struct mg_connection *nc, sock_t sock) {$/;"	f
mg_sock_to_str	mongoose.c	/^void mg_sock_to_str(sock_t sock, char *buf, size_t len, int flags) {$/;"	f
mg_socket_if_add_conn	mongoose.c	/^void mg_socket_if_add_conn(struct mg_connection *nc) {$/;"	f
mg_socket_if_connect_tcp	mongoose.c	/^void mg_socket_if_connect_tcp(struct mg_connection *nc,$/;"	f
mg_socket_if_connect_udp	mongoose.c	/^void mg_socket_if_connect_udp(struct mg_connection *nc) {$/;"	f
mg_socket_if_create_conn	mongoose.c	/^int mg_socket_if_create_conn(struct mg_connection *nc) {$/;"	f
mg_socket_if_destroy_conn	mongoose.c	/^void mg_socket_if_destroy_conn(struct mg_connection *nc) {$/;"	f
mg_socket_if_free	mongoose.c	/^void mg_socket_if_free(struct mg_iface *iface) {$/;"	f
mg_socket_if_get_conn_addr	mongoose.c	/^void mg_socket_if_get_conn_addr(struct mg_connection *nc, int remote,$/;"	f
mg_socket_if_init	mongoose.c	/^void mg_socket_if_init(struct mg_iface *iface) {$/;"	f
mg_socket_if_listen_tcp	mongoose.c	/^int mg_socket_if_listen_tcp(struct mg_connection *nc,$/;"	f
mg_socket_if_listen_udp	mongoose.c	/^static int mg_socket_if_listen_udp(struct mg_connection *nc,$/;"	f	file:
mg_socket_if_poll	mongoose.c	/^time_t mg_socket_if_poll(struct mg_iface *iface, int timeout_ms) {$/;"	f
mg_socket_if_remove_conn	mongoose.c	/^void mg_socket_if_remove_conn(struct mg_connection *nc) {$/;"	f
mg_socket_if_sock_set	mongoose.c	/^void mg_socket_if_sock_set(struct mg_connection *nc, sock_t sock) {$/;"	f
mg_socket_if_tcp_recv	mongoose.c	/^static int mg_socket_if_tcp_recv(struct mg_connection *nc, void *buf,$/;"	f	file:
mg_socket_if_tcp_send	mongoose.c	/^static int mg_socket_if_tcp_send(struct mg_connection *nc, const void *buf,$/;"	f	file:
mg_socket_if_udp_recv	mongoose.c	/^static int mg_socket_if_udp_recv(struct mg_connection *nc, void *buf,$/;"	f	file:
mg_socket_if_udp_send	mongoose.c	/^static int mg_socket_if_udp_send(struct mg_connection *nc, const void *buf,$/;"	f	file:
mg_socket_iface_vtable	mongoose.c	/^const struct mg_iface_vtable mg_socket_iface_vtable = MG_SOCKET_IFACE_VTABLE;$/;"	v	typeref:struct:mg_iface_vtable
mg_socketpair	mongoose.c	/^int mg_socketpair(sock_t sp[2], int sock_type) {$/;"	f
mg_socketpair_accept	mongoose.c	/^mg_socketpair_accept(sock_t sock, union socket_address *sa, socklen_t sa_len) {$/;"	f
mg_socketpair_close	mongoose.c	/^MG_INTERNAL void mg_socketpair_close(sock_t *sock) {$/;"	f
mg_socks5_connect	mongoose.c	/^static void mg_socks5_connect(struct mg_connection *c, const char *addr) {$/;"	f	file:
mg_socks5_handle_request	mongoose.c	/^static void mg_socks5_handle_request(struct mg_connection *c) {$/;"	f	file:
mg_socks5_handshake	mongoose.c	/^static void mg_socks5_handshake(struct mg_connection *c) {$/;"	f	file:
mg_socks_if_add_conn	mongoose.c	/^static void mg_socks_if_add_conn(struct mg_connection *c) {$/;"	f	file:
mg_socks_if_connect_tcp	mongoose.c	/^static void mg_socks_if_connect_tcp(struct mg_connection *c,$/;"	f	file:
mg_socks_if_connect_udp	mongoose.c	/^static void mg_socks_if_connect_udp(struct mg_connection *c) {$/;"	f	file:
mg_socks_if_create_conn	mongoose.c	/^static int mg_socks_if_create_conn(struct mg_connection *c) {$/;"	f	file:
mg_socks_if_destroy_conn	mongoose.c	/^static void mg_socks_if_destroy_conn(struct mg_connection *c) {$/;"	f	file:
mg_socks_if_free	mongoose.c	/^static void mg_socks_if_free(struct mg_iface *iface) {$/;"	f	file:
mg_socks_if_get_conn_addr	mongoose.c	/^static void mg_socks_if_get_conn_addr(struct mg_connection *c, int remote,$/;"	f	file:
mg_socks_if_init	mongoose.c	/^static void mg_socks_if_init(struct mg_iface *iface) {$/;"	f	file:
mg_socks_if_listen_tcp	mongoose.c	/^static int mg_socks_if_listen_tcp(struct mg_connection *c,$/;"	f	file:
mg_socks_if_listen_udp	mongoose.c	/^static int mg_socks_if_listen_udp(struct mg_connection *c,$/;"	f	file:
mg_socks_if_poll	mongoose.c	/^static time_t mg_socks_if_poll(struct mg_iface *iface, int timeout_ms) {$/;"	f	file:
mg_socks_if_remove_conn	mongoose.c	/^static void mg_socks_if_remove_conn(struct mg_connection *c) {$/;"	f	file:
mg_socks_if_sock_set	mongoose.c	/^static void mg_socks_if_sock_set(struct mg_connection *c, sock_t sock) {$/;"	f	file:
mg_socks_if_tcp_recv	mongoose.c	/^int mg_socks_if_tcp_recv(struct mg_connection *c, void *buf, size_t len) {$/;"	f
mg_socks_if_tcp_send	mongoose.c	/^static int mg_socks_if_tcp_send(struct mg_connection *c, const void *buf,$/;"	f	file:
mg_socks_if_udp_recv	mongoose.c	/^int mg_socks_if_udp_recv(struct mg_connection *c, void *buf, size_t len,$/;"	f
mg_socks_if_udp_send	mongoose.c	/^static int mg_socks_if_udp_send(struct mg_connection *c, const void *buf,$/;"	f	file:
mg_socks_iface_vtable	mongoose.c	/^const struct mg_iface_vtable mg_socks_iface_vtable = {$/;"	v	typeref:struct:mg_iface_vtable
mg_socks_mk_iface	mongoose.c	/^struct mg_iface *mg_socks_mk_iface(struct mg_mgr *mgr, const char *proxy_addr) {$/;"	f
mg_spawn_stdio_thread	mongoose.c	/^static void mg_spawn_stdio_thread(sock_t sock, HANDLE hPipe,$/;"	f	file:
mg_ssl_handshake	mongoose.c	/^MG_INTERNAL void mg_ssl_handshake(struct mg_connection *nc) {$/;"	f
mg_ssl_if_conn_accept	mongoose.c	/^enum mg_ssl_if_result mg_ssl_if_conn_accept(struct mg_connection *nc,$/;"	f
mg_ssl_if_conn_close_notify	mongoose.c	/^void mg_ssl_if_conn_close_notify(struct mg_connection *nc) {$/;"	f
mg_ssl_if_conn_free	mongoose.c	/^void mg_ssl_if_conn_free(struct mg_connection *nc) {$/;"	f
mg_ssl_if_conn_init	mongoose.c	/^enum mg_ssl_if_result mg_ssl_if_conn_init($/;"	f
mg_ssl_if_ctx	mongoose.c	/^struct mg_ssl_if_ctx {$/;"	s	file:
mg_ssl_if_handshake	mongoose.c	/^enum mg_ssl_if_result mg_ssl_if_handshake(struct mg_connection *nc) {$/;"	f
mg_ssl_if_init	mongoose.c	/^void mg_ssl_if_init() {$/;"	f
mg_ssl_if_init	mongoose.c	/^void mg_ssl_if_init(void) {$/;"	f
mg_ssl_if_mbed_err	mongoose.c	/^static enum mg_ssl_if_result mg_ssl_if_mbed_err(struct mg_connection *nc,$/;"	f	file:
mg_ssl_if_mbed_free_certs_and_keys	mongoose.c	/^static void mg_ssl_if_mbed_free_certs_and_keys(struct mg_ssl_if_ctx *ctx) {$/;"	f	file:
mg_ssl_if_mbed_random	mongoose.c	/^int mg_ssl_if_mbed_random(void *ctx, unsigned char *buf, size_t len) {$/;"	f
mg_ssl_if_mbed_recv	mongoose.c	/^static int mg_ssl_if_mbed_recv(void *ctx, unsigned char *buf, size_t len) {$/;"	f	file:
mg_ssl_if_mbed_send	mongoose.c	/^static int mg_ssl_if_mbed_send(void *ctx, const unsigned char *buf,$/;"	f	file:
mg_ssl_if_mbed_set_psk	mongoose.c	/^static enum mg_ssl_if_result mg_ssl_if_mbed_set_psk(struct mg_ssl_if_ctx *ctx,$/;"	f	file:
mg_ssl_if_ossl_psk_cb	mongoose.c	/^static unsigned int mg_ssl_if_ossl_psk_cb(SSL *ssl, const char *hint,$/;"	f	file:
mg_ssl_if_ossl_set_psk	mongoose.c	/^static enum mg_ssl_if_result mg_ssl_if_ossl_set_psk(struct mg_ssl_if_ctx *ctx,$/;"	f	file:
mg_ssl_if_read	mongoose.c	/^int mg_ssl_if_read(struct mg_connection *nc, void *buf, size_t buf_size) {$/;"	f
mg_ssl_if_read	mongoose.c	/^int mg_ssl_if_read(struct mg_connection *nc, void *buf, size_t len) {$/;"	f
mg_ssl_if_ssl_err	mongoose.c	/^static enum mg_ssl_if_result mg_ssl_if_ssl_err(struct mg_connection *nc,$/;"	f	file:
mg_ssl_if_write	mongoose.c	/^int mg_ssl_if_write(struct mg_connection *nc, const void *buf, size_t len) {$/;"	f
mg_ssl_if_write	mongoose.c	/^int mg_ssl_if_write(struct mg_connection *nc, const void *data, size_t len) {$/;"	f
mg_ssl_mbed_log	mongoose.c	/^static void mg_ssl_mbed_log(void *ctx, int level, const char *file, int line,$/;"	f	file:
mg_start_process	mongoose.c	/^static int mg_start_process(const char *interp, const char *cmd,$/;"	f	file:
mg_start_task	mongoose.c	/^bool mg_start_task(int priority, int stack_size, mg_init_cb mg_init) {$/;"	f
mg_start_thread	mongoose.c	/^void *mg_start_thread(void *(*f)(void *), void *p) {$/;"	f
mg_stat	mongoose.c	/^int mg_stat(const char *path, cs_stat_t *st) {$/;"	f
mg_static_builtin_mime_types	mongoose.c	/^} mg_static_builtin_mime_types[] = {$/;"	v	typeref:struct:__anon5	file:
mg_status_message	mongoose.c	/^const char *mg_status_message(int status_code) {$/;"	f
mg_str_starts_with	mongoose.c	/^int mg_str_starts_with(struct mg_str s, struct mg_str prefix) {$/;"	f
mg_strcasecmp	mongoose.c	/^int mg_strcasecmp(const struct mg_str str1, const struct mg_str str2) {$/;"	f
mg_strchr	mongoose.c	/^const char *mg_strchr(const struct mg_str s, int c) {$/;"	f
mg_strcmp	mongoose.c	/^int mg_strcmp(const struct mg_str str1, const struct mg_str str2) {$/;"	f
mg_strdup	mongoose.c	/^struct mg_str mg_strdup(const struct mg_str s) {$/;"	f
mg_strdup_common	mongoose.c	/^static struct mg_str mg_strdup_common(const struct mg_str s,$/;"	f	file:
mg_strdup_nul	mongoose.c	/^struct mg_str mg_strdup_nul(const struct mg_str s) {$/;"	f
mg_strfree	mongoose.c	/^void mg_strfree(struct mg_str *s) {$/;"	f
mg_strncmp	mongoose.c	/^int mg_strncmp(const struct mg_str str1, const struct mg_str str2, size_t n) {$/;"	f
mg_strstr	mongoose.c	/^const char *mg_strstr(const struct mg_str haystack,$/;"	f
mg_strstrip	mongoose.c	/^struct mg_str mg_strstrip(struct mg_str s) {$/;"	f
mg_task	mongoose.c	/^static void mg_task(void *arg) {$/;"	f	file:
mg_threadparam	mongoose.c	/^struct mg_threadparam {$/;"	s	file:
mg_time	mongoose.c	/^double mg_time(void) {$/;"	f
mg_timer	mongoose.c	/^MG_INTERNAL void mg_timer(struct mg_connection *c, double now) {$/;"	f
mg_uri_to_local_path	mongoose.c	/^MG_INTERNAL int mg_uri_to_local_path(struct http_message *hm,$/;"	f
mg_url_decode	mongoose.c	/^int mg_url_decode(const char *src, int src_len, char *dst, int dst_len,$/;"	f
mg_url_encode	mongoose.c	/^struct mg_str mg_url_encode(const struct mg_str src) {$/;"	f
mg_url_encode_opt	mongoose.c	/^struct mg_str mg_url_encode_opt(const struct mg_str src,$/;"	f
mg_use_ca_cert	mongoose.c	/^static enum mg_ssl_if_result mg_use_ca_cert(SSL_CTX *ctx, const char *cert) {$/;"	f	file:
mg_use_ca_cert	mongoose.c	/^static enum mg_ssl_if_result mg_use_ca_cert(struct mg_ssl_if_ctx *ctx,$/;"	f	file:
mg_use_cert	mongoose.c	/^static enum mg_ssl_if_result mg_use_cert(SSL_CTX *ctx, const char *cert,$/;"	f	file:
mg_use_cert	mongoose.c	/^static enum mg_ssl_if_result mg_use_cert(struct mg_ssl_if_ctx *ctx,$/;"	f	file:
mg_vcasecmp	mongoose.c	/^int mg_vcasecmp(const struct mg_str *str1, const char *str2) {$/;"	f
mg_vcmp	mongoose.c	/^int mg_vcmp(const struct mg_str *str1, const char *str2) {$/;"	f
mg_version_header	mongoose.c	/^static const char *mg_version_header = "Mongoose\/" MG_VERSION;$/;"	v	file:
mg_vprintf	mongoose.c	/^int mg_vprintf(struct mg_connection *nc, const char *fmt, va_list ap) {$/;"	f
mg_wait_until_ready	mongoose.c	/^static int mg_wait_until_ready(sock_t sock, int for_read) {$/;"	f	file:
mg_ws_close	mongoose.c	/^static void mg_ws_close(struct mg_connection *nc, const void *data,$/;"	f	file:
mg_ws_get_proto_data	mongoose.c	/^static struct mg_ws_proto_data *mg_ws_get_proto_data(struct mg_connection *nc) {$/;"	f	file:
mg_ws_handler	mongoose.c	/^MG_INTERNAL void mg_ws_handler(struct mg_connection *nc, int ev,$/;"	f
mg_ws_handshake	mongoose.c	/^MG_INTERNAL void mg_ws_handshake(struct mg_connection *nc,$/;"	f
mg_ws_mask_frame	mongoose.c	/^static void mg_ws_mask_frame(struct mbuf *mbuf, struct ws_mask_ctx *ctx) {$/;"	f	file:
mg_ws_proto_data	mongoose.c	/^struct mg_ws_proto_data {$/;"	s	file:
mg_ws_random_mask	mongoose.c	/^static uint32_t mg_ws_random_mask(void) {$/;"	f	file:
mgos_lock	mongoose.c	14973;"	d	file:
mgos_unlock	mongoose.c	14974;"	d	file:
mime_type	mongoose.c	/^  const char *mime_type;$/;"	m	struct:__anon5	file:
mkdir	mongoose.c	/^int mkdir(const char *path, mode_t mode) {$/;"	f
mode_t	mongoose.h	/^typedef unsigned int mode_t;$/;"	t
mp_stream	mongoose.c	/^  struct mg_http_multipart_stream mp_stream;$/;"	m	struct:mg_http_proto_data	typeref:struct:mg_http_proto_data::mg_http_multipart_stream	file:
mqtt_handler	mongoose.c	/^static void mqtt_handler(struct mg_connection *nc, int ev,$/;"	f	file:
name	mongoose.c	/^  char *name;$/;"	m	struct:sl_file_open_info	file:
name	mongoose.c	/^  char name[1024];$/;"	m	struct:mg_resolve_async_request	file:
nc	mongoose.c	/^  struct mg_connection *nc;$/;"	m	struct:mg_cgi_env_block	typeref:struct:mg_cgi_env_block::mg_connection	file:
nc	mongoose.c	/^  struct mg_connection *nc;$/;"	m	struct:mg_ev_mgr_lwip_signal	typeref:struct:mg_ev_mgr_lwip_signal::mg_connection	file:
nc	mongoose.c	/^  struct mg_connection *nc;$/;"	m	struct:mg_lwip_conn_state	typeref:struct:mg_lwip_conn_state::mg_connection	file:
nc	mongoose.c	/^  struct mg_connection *nc;$/;"	m	struct:mg_lwip_if_connect_tcp_ctx	typeref:struct:mg_lwip_if_connect_tcp_ctx::mg_connection	file:
nc	mongoose.c	/^  struct mg_connection *nc;$/;"	m	struct:mg_lwip_if_listen_ctx	typeref:struct:mg_lwip_if_listen_ctx::mg_connection	file:
nc	mongoose.c	/^  struct mg_connection *nc;$/;"	m	struct:mg_lwip_tcp_write_ctx	typeref:struct:mg_lwip_tcp_write_ctx::mg_connection	file:
next	cJSON.h	/^    struct cJSON *next;$/;"	m	struct:cJSON	typeref:struct:cJSON::cJSON
next	mongoose.c	/^  struct mg_http_endpoint *next;$/;"	m	struct:mg_http_endpoint	typeref:struct:mg_http_endpoint::mg_http_endpoint	file:
noalloc	cJSON.c	/^    cJSON_bool noalloc;$/;"	m	struct:__anon3	file:
num_answers	mongoose.c	/^  uint16_t num_answers;$/;"	m	struct:mg_dns_header	file:
num_authority_prs	mongoose.c	/^  uint16_t num_authority_prs;$/;"	m	struct:mg_dns_header	file:
num_other_prs	mongoose.c	/^  uint16_t num_other_prs;$/;"	m	struct:mg_dns_header	file:
num_questions	mongoose.c	/^  uint16_t num_questions;$/;"	m	struct:mg_dns_header	file:
num_recd	mongoose.c	/^  size_t num_recd;$/;"	m	struct:file_upload_state	file:
num_sent	mongoose.c	/^  size_t num_sent; \/* Number of acknowledged bytes to be reported to the core *\/$/;"	m	struct:mg_lwip_conn_state	file:
nvars	mongoose.c	/^  int nvars;                               \/* Number of variables in envp[] *\/$/;"	m	struct:mg_cgi_env_block	file:
offset	cJSON.c	/^    size_t offset;$/;"	m	struct:__anon2	file:
offset	cJSON.c	/^    size_t offset;$/;"	m	struct:__anon3	file:
open	mongoose.c	/^int open(const char *filename, int oflag, int pmode) {$/;"	f
open	mongoose.c	/^int open(const char *pathname, unsigned flags, int mode) {$/;"	f
opendir	mongoose.c	/^DIR *opendir(const char *dir_name) {$/;"	f
opendir	mongoose.c	/^DIR *opendir(const char *name) {$/;"	f
p	mongoose.c	/^  struct pbuf *p;$/;"	m	struct:udp_sendto_ctx	typeref:struct:udp_sendto_ctx::pbuf	file:
parse_array	cJSON.c	/^static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)$/;"	f	file:
parse_buffer	cJSON.c	/^} parse_buffer;$/;"	t	typeref:struct:__anon2	file:
parse_hex4	cJSON.c	/^static unsigned parse_hex4(const unsigned char * const input)$/;"	f	file:
parse_mqtt	mongoose.c	/^MG_INTERNAL int parse_mqtt(struct mbuf *io, struct mg_mqtt_message *mm) {$/;"	f
parse_net	mongoose.c	/^static int parse_net(const char *spec, uint32_t *net, uint32_t *mask) {$/;"	f	file:
parse_number	cJSON.c	/^static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)$/;"	f	file:
parse_object	cJSON.c	/^static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)$/;"	f	file:
parse_string	cJSON.c	/^static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)$/;"	f	file:
parse_uri_component	mongoose.c	/^static void parse_uri_component(const char **p, const char *end,$/;"	f	file:
parse_value	cJSON.c	/^static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)$/;"	f	file:
pcb	mongoose.c	/^  } pcb;$/;"	m	struct:mg_lwip_conn_state	typeref:union:mg_lwip_conn_state::__anon6	file:
pclose	mongoose.h	257;"	d
pem_to_der	mongoose.c	/^bool pem_to_der(const char *pem_file, const char *der_file) {$/;"	f
pid_t	mongoose.h	291;"	d
popen	mongoose.h	256;"	d
port	mongoose.c	/^  uint16_t port;$/;"	m	struct:udp_sendto_ctx	file:
pos	mongoose.c	/^  _off_t pos;$/;"	m	struct:sl_fd_info	file:
pos	mongoose.c	/^  size_t pos; \/* zero means unmasked *\/$/;"	m	struct:ws_mask_ctx	file:
position	cJSON.c	/^    size_t position;$/;"	m	struct:__anon1	file:
prev	cJSON.h	/^    struct cJSON *prev;$/;"	m	struct:cJSON	typeref:struct:cJSON::cJSON
print	cJSON.c	/^static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)$/;"	f	file:
print_array	cJSON.c	/^static cJSON_bool print_array(const cJSON * const item, printbuffer * const output_buffer)$/;"	f	file:
print_number	cJSON.c	/^static cJSON_bool print_number(const cJSON * const item, printbuffer * const output_buffer)$/;"	f	file:
print_object	cJSON.c	/^static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer)$/;"	f	file:
print_string	cJSON.c	/^static cJSON_bool print_string(const cJSON * const item, printbuffer * const p)$/;"	f	file:
print_string_ptr	cJSON.c	/^static cJSON_bool print_string_ptr(const unsigned char * const input, printbuffer * const output_buffer)$/;"	f	file:
print_value	cJSON.c	/^static cJSON_bool print_value(const cJSON * const item, printbuffer * const output_buffer)$/;"	f	file:
printbuffer	cJSON.c	/^} printbuffer;$/;"	t	typeref:struct:__anon3	file:
processing_part	mongoose.c	/^  int processing_part;$/;"	m	struct:mg_http_multipart_stream	file:
proxy_addr	mongoose.c	/^  char *proxy_addr;        \/* HOST:PORT of the socks5 proxy server *\/$/;"	m	struct:socksdata	file:
psk	mongoose.c	/^  struct mbuf psk;$/;"	m	struct:mg_ssl_if_ctx	typeref:struct:mg_ssl_if_ctx::mbuf	file:
query	mongoose.c	/^  int query;$/;"	m	struct:mg_resolve_async_request	file:
rcvd	mongoose.c	/^  size_t rcvd;           \/* How many bytes we have received. *\/$/;"	m	struct:mg_http_proto_data	file:
read	mongoose.c	/^int read(int fd, char *buf, unsigned count) {$/;"	f
readdir	mongoose.c	/^struct dirent *readdir(DIR *d) {$/;"	f
readdir	mongoose.c	/^struct dirent *readdir(DIR *dir) {$/;"	f
reallocate	cJSON.c	/^    void *(CJSON_CDECL *reallocate)(void *pointer, size_t size);$/;"	m	struct:internal_hooks	file:
reass_len	mongoose.c	/^  size_t reass_len;$/;"	m	struct:mg_ws_proto_data	file:
recv_avail_size	mongoose.c	/^MG_INTERNAL size_t recv_avail_size(struct mg_connection *conn, size_t max) {$/;"	f
recv_pending	mongoose.c	/^  int recv_pending;$/;"	m	struct:mg_lwip_conn_state	file:
relay_data	mongoose.c	/^static void relay_data(struct mg_connection *c) {$/;"	f	file:
rename	mongoose.c	/^int rename(const char *frompath, const char *topath) {$/;"	f
replace_item_in_object	cJSON.c	/^static cJSON_bool replace_item_in_object(cJSON *object, const char *string, cJSON *replacement, cJSON_bool case_sensitive)$/;"	f	file:
resolve_cb	mongoose.c	/^static void resolve_cb(struct mg_dns_message *msg, void *data,$/;"	f	file:
result	mongoose.c	/^  struct dirent result;$/;"	m	struct:win32_dir	typeref:struct:win32_dir::dirent	file:
ret	mongoose.c	/^  int ret;$/;"	m	struct:mg_lwip_if_listen_ctx	file:
ret	mongoose.c	/^  int ret;$/;"	m	struct:mg_lwip_tcp_write_ctx	file:
ret	mongoose.c	/^  int ret;$/;"	m	struct:udp_sendto_ctx	file:
retries	mongoose.c	/^  int retries;$/;"	m	struct:mg_resolve_async_request	file:
reverse_proxy_data	mongoose.c	/^  struct mg_reverse_proxy_data reverse_proxy_data;$/;"	m	struct:mg_http_proto_data	typeref:struct:mg_http_proto_data::mg_reverse_proxy_data	file:
rmdir	mongoose.c	/^int rmdir(const char *dirname) {$/;"	f
rmdir	mongoose.c	/^int rmdir(const char *path) {$/;"	f
rol	mongoose.c	1165;"	d	file:
rx_chain	mongoose.c	/^  struct pbuf *rx_chain; \/* Chain of incoming data segments. *\/$/;"	m	struct:mg_lwip_conn_state	typeref:struct:mg_lwip_conn_state::pbuf	file:
rx_offset	mongoose.c	/^  size_t rx_offset; \/* Offset within the first pbuf (if partially consumed) *\/$/;"	m	struct:mg_lwip_conn_state	file:
s	mongoose.c	/^  sock_t s;$/;"	m	struct:mg_threadparam	file:
s	mongoose.c	/^  struct mg_connection *s; \/* Respective connection to the server *\/$/;"	m	struct:socksdata	typeref:struct:socksdata::mg_connection	file:
s_file_level	mongoose.c	/^static char *s_file_level = NULL;$/;"	v	file:
s_http_port	websocket_server.c	/^static const char *s_http_port = "8000";$/;"	v	file:
s_http_server_opts	websocket_server.c	/^static struct mg_serve_http_opts s_http_server_opts;$/;"	v	typeref:struct:mg_serve_http_opts	file:
s_mg_q	mongoose.c	/^static OsiMsgQ_t s_mg_q;$/;"	v	file:
s_signal_received	websocket_server.c	/^static sig_atomic_t s_signal_received = 0;$/;"	v	file:
s_sl_fds	mongoose.c	/^static struct sl_fd_info s_sl_fds[MAX_OPEN_SLFS_FILES];$/;"	v	typeref:struct:sl_fd_info	file:
s_sl_file_open_infos	mongoose.c	/^static struct sl_file_open_info s_sl_file_open_infos[MAX_OPEN_SLFS_FILES];$/;"	v	typeref:struct:sl_file_open_info	file:
s_tcpip_call_lock_sem	mongoose.c	/^static sys_sem_t s_tcpip_call_lock_sem = NULL;$/;"	v	file:
s_tcpip_call_sync_sem	mongoose.c	/^static sys_sem_t s_tcpip_call_sync_sem = NULL;$/;"	v	file:
sa	mongoose.c	/^  const union socket_address *sa;$/;"	m	struct:mg_lwip_if_connect_tcp_ctx	typeref:union:mg_lwip_if_connect_tcp_ctx::socket_address	file:
sa	mongoose.c	/^  union socket_address *sa;$/;"	m	struct:mg_lwip_if_listen_ctx	typeref:union:mg_lwip_if_listen_ctx::socket_address	file:
saved_len	mongoose.c	/^  size_t saved_len;$/;"	m	struct:mg_ssl_if_ctx	file:
scanto	mongoose.c	/^static const char *scanto(const char *p, struct mg_str *s) {$/;"	f	file:
sent	mongoose.c	/^  int64_t sent;  \/* How many bytes have been already sent. *\/$/;"	m	struct:mg_http_proto_data_file	file:
serv_ev_handler	mongoose.c	/^static void serv_ev_handler(struct mg_connection *c, int ev, void *ev_data) {$/;"	f	file:
set_errno	mongoose.c	/^int set_errno(int e) {$/;"	f
sig	mongoose.c	/^  int sig;$/;"	m	struct:mg_ev_mgr_lwip_signal	file:
sig_queue	mongoose.c	/^  struct mg_ev_mgr_lwip_signal sig_queue[MG_SIG_QUEUE_LEN];$/;"	m	struct:mg_ev_mgr_lwip_data	typeref:struct:mg_ev_mgr_lwip_data::mg_ev_mgr_lwip_signal	file:
sig_queue_len	mongoose.c	/^  int sig_queue_len;$/;"	m	struct:mg_ev_mgr_lwip_data	file:
signal_handler	websocket_server.c	/^static void signal_handler(int sig_num) {$/;"	f	file:
size	cJSON.h	/^CJSON_PUBLIC(void *) cJSON_malloc(size_t size);$/;"	v
size	mongoose.c	/^  size_t size;$/;"	m	struct:sl_fd_info	file:
size	mongoose.c	/^  size_t size;$/;"	m	struct:sl_file_open_info	file:
skip_utf8_bom	cJSON.c	/^static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)$/;"	f	file:
sl_fd_info	mongoose.c	/^struct sl_fd_info {$/;"	s	file:
sl_file_open_info	mongoose.c	/^struct sl_file_open_info {$/;"	s	file:
sl_fs_init	mongoose.c	/^int sl_fs_init(void) {$/;"	f
sl_fs_to_errno	mongoose.c	/^static int sl_fs_to_errno(_i32 r) {$/;"	f	file:
sl_pem2der	mongoose.c	/^static char *sl_pem2der(const char *pem_file) {$/;"	f	file:
sl_restart_cb	mongoose.c	/^void sl_restart_cb(struct mg_mgr *mgr) {$/;"	f
sl_set_ssl_opts	mongoose.c	/^int sl_set_ssl_opts(int sock, struct mg_connection *nc) {$/;"	f
sleep	mongoose.c	/^unsigned int sleep(unsigned int seconds) {$/;"	f
slfs_open	mongoose.c	/^int slfs_open(const unsigned char *fname, uint32_t flags, uint32_t *token) {$/;"	f
snprintf	mongoose.h	252;"	d
sntp_data	mongoose.c	/^struct sntp_data {$/;"	s	file:
sock_t	mongoose.h	/^typedef SOCKET sock_t;$/;"	t
sock_t	mongoose.h	/^typedef int sock_t;$/;"	t
socklen_t	mongoose.h	/^typedef int socklen_t;$/;"	t
socks_handler	mongoose.c	/^static void socks_handler(struct mg_connection *c, int ev, void *ev_data) {$/;"	f	file:
socks_if_disband	mongoose.c	/^static void socks_if_disband(struct socksdata *d) {$/;"	f	file:
socks_if_handler	mongoose.c	/^static void socks_if_handler(struct mg_connection *c, int ev, void *ev_data) {$/;"	f	file:
socks_if_relay	mongoose.c	/^static void socks_if_relay(struct mg_connection *s) {$/;"	f	file:
socksdata	mongoose.c	/^struct socksdata {$/;"	s	file:
ssize_t	mongoose.h	/^typedef long ssize_t;$/;"	t
ssl	mongoose.c	/^  SSL *ssl;$/;"	m	struct:mg_ssl_if_ctx	file:
ssl	mongoose.c	/^  mbedtls_ssl_context *ssl;$/;"	m	struct:mg_ssl_if_ctx	file:
ssl_ca_cert	mongoose.c	/^  char *ssl_ca_cert;$/;"	m	struct:mg_ssl_if_ctx	file:
ssl_cert	mongoose.c	/^  char *ssl_cert;$/;"	m	struct:mg_ssl_if_ctx	file:
ssl_ctx	mongoose.c	/^  SSL_CTX *ssl_ctx;$/;"	m	struct:mg_ssl_if_ctx	file:
ssl_key	mongoose.c	/^  char *ssl_key;$/;"	m	struct:mg_ssl_if_ctx	file:
ssl_server_name	mongoose.c	/^  char *ssl_server_name;$/;"	m	struct:mg_ssl_if_ctx	file:
st_ino	mongoose.h	/^  int st_ino;$/;"	m	struct:stat
st_mode	mongoose.h	/^  mode_t st_mode;$/;"	m	struct:stat
st_mtime	mongoose.h	/^  time_t st_mtime;$/;"	m	struct:stat
st_nlink	mongoose.h	/^  int st_nlink;$/;"	m	struct:stat
st_size	mongoose.h	/^  off_t st_size;$/;"	m	struct:stat
start_index	mongoose.c	/^  int start_index;$/;"	m	struct:mg_ev_mgr_lwip_data	file:
stat	mongoose.h	/^struct stat {$/;"	s
stat	mongoose.h	950;"	d
state	mongoose.c	/^  enum mg_http_multipart_stream_state state;$/;"	m	struct:mg_http_multipart_stream	typeref:enum:mg_http_multipart_stream::mg_http_multipart_stream_state	file:
str_util_lowercase	mongoose.c	/^static int str_util_lowercase(const char *s) {$/;"	f	file:
strdup	mongoose.c	/^char *strdup(const char *src) {$/;"	f
strdup	mongoose.h	238;"	d
strerror	mongoose.c	/^const char *strerror(int err) {$/;"	f
string	cJSON.h	/^    char *string;$/;"	m	struct:cJSON
suffix_object	cJSON.c	/^static void suffix_object(cJSON *prev, cJSON *item)$/;"	f	file:
tcp	mongoose.c	/^    struct tcp_pcb *tcp;$/;"	m	union:mg_lwip_conn_state::__anon6	typeref:struct:mg_lwip_conn_state::__anon6::tcp_pcb	file:
tcp_close_tcpip	mongoose.c	/^static void tcp_close_tcpip(void *arg) {$/;"	f	file:
tcp_output_tcpip	mongoose.c	/^static void tcp_output_tcpip(void *arg) {$/;"	f	file:
tcp_recved_ctx	mongoose.c	/^struct tcp_recved_ctx {$/;"	s	file:
tcp_recved_tcpip	mongoose.c	/^void tcp_recved_tcpip(void *arg) {$/;"	f
timegm	mongoose.h	353;"	d
timeout	mongoose.c	/^  time_t timeout;$/;"	m	struct:mg_resolve_async_request	file:
timeval	mongoose.h	635;"	d
timeval	mongoose.h	705;"	d
timeval	mongoose.h	828;"	d
timeval	mongoose.h	928;"	d
to64	mongoose.h	1010;"	d
to64	mongoose.h	254;"	d
to64	mongoose.h	446;"	d
to64	mongoose.h	533;"	d
to64	mongoose.h	576;"	d
to64	mongoose.h	640;"	d
to64	mongoose.h	690;"	d
to64	mongoose.h	813;"	d
to64	mongoose.h	913;"	d
to_wchar	mongoose.c	/^int to_wchar(const char *path, wchar_t *wbuf, size_t wbuf_len) {$/;"	f
token	mongoose.c	/^  uint32_t *token;$/;"	m	struct:sl_file_open_info	file:
tpcb	mongoose.c	/^  struct tcp_pcb *tpcb;$/;"	m	struct:tcp_recved_ctx	typeref:struct:tcp_recved_ctx::tcp_pcb	file:
transaction_id	mongoose.c	/^  uint16_t transaction_id;$/;"	m	struct:mg_dns_header	file:
true	cJSON.c	61;"	d	file:
type	cJSON.h	/^    int type;$/;"	m	struct:cJSON
type	mongoose.c	/^  enum mg_http_proto_data_type type;$/;"	m	struct:mg_http_proto_data_file	typeref:enum:mg_http_proto_data_file::mg_http_proto_data_type	file:
type	mongoose.c	/^  enum mg_q_msg_type type;$/;"	m	struct:mg_q_msg	typeref:enum:mg_q_msg::mg_q_msg_type	file:
udp	mongoose.c	/^    struct udp_pcb *udp;$/;"	m	union:mg_lwip_conn_state::__anon6	typeref:struct:mg_lwip_conn_state::__anon6::udp_pcb	file:
udp_remove_tcpip	mongoose.c	/^static void udp_remove_tcpip(void *arg) {$/;"	f	file:
udp_sendto_ctx	mongoose.c	/^struct udp_sendto_ctx {$/;"	s	file:
udp_sendto_tcpip	mongoose.c	/^static void udp_sendto_tcpip(void *arg) {$/;"	f	file:
uint16_t	mongoose.h	/^typedef unsigned short uint16_t;$/;"	t
uint32_t	mongoose.h	/^typedef unsigned int uint32_t;$/;"	t
uint64_t	mongoose.h	/^typedef unsigned __int64 uint64_t;$/;"	t
uint8_t	mongoose.h	/^typedef unsigned char uint8_t;$/;"	t
uintptr_t	mongoose.h	/^typedef unsigned long uintptr_t;$/;"	t
unlink	mongoose.c	/^int unlink(const char *pathname) {$/;"	f
upcb	mongoose.c	/^  struct udp_pcb *upcb;$/;"	m	struct:udp_sendto_ctx	typeref:struct:udp_sendto_ctx::udp_pcb	file:
update_offset	cJSON.c	/^static void update_offset(printbuffer * const buffer)$/;"	f	file:
uri_pattern	mongoose.c	/^  struct mg_str uri_pattern; \/* owned *\/$/;"	m	struct:mg_http_endpoint	typeref:struct:mg_http_endpoint::mg_str	file:
user_buf	mongoose.c	/^  char *user_buf;$/;"	m	struct:altbuf	file:
user_buf_size	mongoose.c	/^  size_t user_buf_size;$/;"	m	struct:altbuf	file:
user_data	mongoose.c	/^  void *user_data;$/;"	m	struct:mg_http_endpoint	file:
user_data	mongoose.c	/^  void *user_data;$/;"	m	struct:mg_http_multipart_stream	file:
utf16_literal_to_utf8	cJSON.c	/^static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)$/;"	f	file:
va_copy	mongoose.h	1033;"	d
va_copy	mongoose.h	308;"	d
va_copy	mongoose.h	310;"	d
va_copy	mongoose.h	456;"	d
va_copy	mongoose.h	458;"	d
va_copy	mongoose.h	749;"	d
va_copy	mongoose.h	967;"	d
valuedouble	cJSON.h	/^    double valuedouble;$/;"	m	struct:cJSON
valueint	cJSON.h	/^    int valueint;$/;"	m	struct:cJSON
valuestring	cJSON.h	/^    char *valuestring;$/;"	m	struct:cJSON
var_name	mongoose.c	/^  const char *var_name;$/;"	m	struct:mg_http_multipart_stream	file:
vars	mongoose.c	/^  const char *vars[MG_MAX_CGI_ENVIR_VARS]; \/* char *envp[] *\/$/;"	m	struct:mg_cgi_env_block	file:
vsnprintf	mongoose.h	253;"	d
win32_dir	mongoose.c	/^struct win32_dir {$/;"	s	file:
write	mongoose.c	/^int write(int fd, const char *buf, unsigned count) {$/;"	f
ws_data	mongoose.c	/^  struct mg_ws_proto_data ws_data;$/;"	m	struct:mg_http_proto_data	typeref:struct:mg_http_proto_data::mg_ws_proto_data	file:
ws_mask_ctx	mongoose.c	/^struct ws_mask_ctx {$/;"	s	file:
xxx_tcpip	mongoose.c	/^static void xxx_tcpip(void *arg) {$/;"	f	file:
